<#@ template inherits="Microsoft.VisualStudio.TextTemplating.VSHost.ModelingTextTransformation" #>
<#@ output extension=".cs" #>
<#
	string dslName = this.Dsl.Name;
	string dslFullName = this.Dsl.GetFullName(true);
	Designer designer = CodeGenerationUtilities.GetDesigner(this.Dsl);
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDiagrams = global::Microsoft.VisualStudio.Modeling.Diagrams;
using DslShell = global::Microsoft.VisualStudio.Modeling.Shell;

namespace <#= CodeGenerationUtilities.GetPackageNamespace(this.Dsl) #>
{
	/// <summary>
	/// Double-derived class to allow easier code customization.
	/// </summary>
<#
	if(designer == null)
	{
		// Place toolbox item filter attribute here since there is no diagram to place it on.
#>
	[global::System.ComponentModel.ToolboxItemFilterAttribute(<#= dslFullName #>ToolboxHelperBase.ToolboxFilterString, global::System.ComponentModel.ToolboxItemFilterType.Require)]
<#
	}
#>
	internal partial class <#= dslName #>DocView : <#= dslName #>DocViewBase
	{
		/// <summary>
		/// Constructs a new <#= dslName #>DocView.
		/// </summary>
		public <#= dslName #>DocView(DslShell::ModelingDocData docData, global::System.IServiceProvider serviceProvider)
			: base(docData, serviceProvider)
		{
		}
<#
	if(designer == null)
	{
#>

		// This DSL defines a custom editor. Therefore, you must create a partial class of <#= dslName #>DocView and
		// override the Window property of this class to specify the window that will be hosted as the editor.
		// In most cases this will be a class derived from System.Windows.Forms.Control.  
		// public override System.Windows.Forms.IWin32Window Window
		// {
		// 	get
		// 	{
		// 	}
		// }
<#
	}
#>
	}

	/// <summary>
	/// Class that hosts the diagram surface in the Visual Studio document area.
	/// </summary>
	internal abstract class <#= dslName #>DocViewBase : <#= designer != null ? "DslShell::SingleDiagramDocView" : "DslShell::ModelingDocView" #>
	{
		/// <summary>
		/// Constructs a new <#= dslName #>DocView.
		/// </summary>
		protected <#= dslName #>DocViewBase(DslShell::ModelingDocData docData, global::System.IServiceProvider serviceProvider) : base(docData, serviceProvider)
		{
		}

		/// <summary>
		/// Called to initialize the view after the corresponding document has been loaded.
		/// </summary>
		protected override bool LoadView()
		{
			base.LoadView();

			global::System.Diagnostics.Debug.Assert(this.DocData.RootElement!=null);
			if (this.DocData.RootElement == null)
			{
				return false;
			}
<#
			if(designer != null)
			{
#>

			// The diagram should exist in the diagram partition by now, just need to find it and connect it to this view.
			<#= dslName #>DocDataBase docData = this.DocData as <#= dslName #>DocDataBase;
			global::System.Diagnostics.Debug.Assert(docData != null, "DocData for <#= dslName #>DocViewBase should be an <#= dslName #>DocDataBase!");
			DslModeling::Partition diagramPartition = docData.GetDiagramPartition();
			if (diagramPartition != null)
			{
				global::System.Collections.ObjectModel.ReadOnlyCollection<<#= designer.Diagram.GetFullName(true) #>> diagrams = docData.GetDiagramPartition().ElementDirectory.FindElements<<#= designer.Diagram.GetFullName(true) #>>();
				if (diagrams.Count > 0)
				{
					global::System.Diagnostics.Debug.Assert(diagrams.Count == 1, "Found more than one diagram, using the first one found.");
					this.Diagram = (DslDiagrams::Diagram)diagrams[0];
				}
				else
				{
					return false;
				}
			}
			else
			{
				return false;
			}
<#
			}
#>

			return true;
		}

<#
		if(this.Dsl.Editor.ToolboxTabs.Count > 0)
		{
#>
		/// <summary>
		/// Name of the toolbox tab that should be displayed when the diagram is opened.
		/// </summary>
		protected override string DefaultToolboxTabName
		{
			get
			{
				return global::<#= this.Dsl.Namespace #>.<#= dslName #>ToolboxHelper.DefaultToolboxTabName;
			}
		}
		
		/// <summary>
		/// Returns the toolbox items count in the default tool box tab.
		/// </summary>
		protected override int DefaultToolboxTabToolboxItemsCount
		{
			get
			{
				return global::<#= this.Dsl.Namespace #>.<#= dslName #>ToolboxHelper.DefaultToolboxTabToolboxItemsCount;			
			}
		}
		
		
<#
		}
		if(designer != null)
		{
#>
		/// <summary>
		/// Context menu displayed when the user right-clicks on the design surface.
		/// </summary>
		protected override global::System.ComponentModel.Design.CommandID ContextMenuId
		{
			get
			{
				return Constants.<#= dslName #>DiagramMenu;
			}
		}
			
<#
		}
		if(!string.IsNullOrEmpty(this.DslLibrary.HelpKeyword))
		{
#>
		/// <summary>
		/// Called after the window has been sited by the Visual Studio shell.
		/// </summary>
		/// <remarks>
		/// Overriden to push an F1 help keyword for the window.
		/// </remarks>
		protected override void Initialize()
		{
			base.Initialize();
			
			global::System.ComponentModel.Design.IHelpService helpService = this.HelpService;
			if(helpService != null)
			{
				helpService.AddContextAttribute(string.Empty, "<#= this.DslLibrary.HelpKeyword #>", global::System.ComponentModel.Design.HelpKeywordType.F1Keyword);
			}
		}
		
<#
		}
#>
		/// <summary>
		/// Called when selection changes in this window.
		/// </summary>
		/// <remarks>
		/// Overriden to update the F1 help keyword for the selection.
		/// </remarks>
		/// <param name="e"></param>
		protected override void OnSelectionChanged(global::System.EventArgs e)
		{
			base.OnSelectionChanged(e);

			if(<#= dslFullName #>HelpKeywordHelper.Instance != null)
			{
				DslModeling::ModelElement selectedElement = this.PrimarySelection as DslModeling::ModelElement;
				if(selectedElement != null)
				{
					string f1Keyword = <#= dslFullName #>HelpKeywordHelper.Instance.GetHelpKeyword(selectedElement);

					// If this is a presentation element, check the underlying model element for a help keyword
					DslDiagrams::PresentationElement presentationElement = this.PrimarySelection as DslDiagrams::PresentationElement;
					if(presentationElement != null)
					{
						selectedElement = presentationElement.ModelElement;
						if(selectedElement != null)
						{
							string modelElementKeyword = <#= dslFullName #>HelpKeywordHelper.Instance.GetHelpKeyword(selectedElement);
							if(string.IsNullOrEmpty(f1Keyword))
							{
								// Presentation element does not have an F1 keyword, so push the keyword from the model element as an F1 keyword.
								f1Keyword = modelElementKeyword;
							}
							else if (!string.IsNullOrEmpty(modelElementKeyword) && this.SelectionHelpService != null)
							{
								// Presentation element has an F1 keyword, so push model element keyword as a general dynamic help keyword (non-F1).
								this.SelectionHelpService.AddContextAttribute(string.Empty, modelElementKeyword, global::System.ComponentModel.Design.HelpKeywordType.GeneralKeyword);
							}
						}
					}
					
					if(!string.IsNullOrEmpty(f1Keyword) && this.SelectionHelpService != null)
					{
						this.SelectionHelpService.AddContextAttribute(string.Empty, f1Keyword, global::System.ComponentModel.Design.HelpKeywordType.F1Keyword);
					}
				}
			}
		}
	}
}

