//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Company.OrmLanguage
{
	/// <summary>
	/// DomainRelationship SampleOrmModelHasElements
	/// Embedding relationship between the Model and Elements
	/// </summary>
	[DslDesign::DisplayNameResource("Company.OrmLanguage.SampleOrmModelHasElements.DisplayName", typeof(global::Company.OrmLanguage.OrmLanguageDomainModel), "Company.OrmLanguage.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.OrmLanguage.SampleOrmModelHasElements.Description", typeof(global::Company.OrmLanguage.OrmLanguageDomainModel), "Company.OrmLanguage.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.OrmLanguage.OrmLanguageDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("3a158a50-ceab-48e4-b9f1-5828c849ff59")]
	public partial class SampleOrmModelHasElements : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SampleOrmModelHasElements domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x3a158a50, 0xceab, 0x48e4, 0xb9, 0xf1, 0x58, 0x28, 0xc8, 0x49, 0xff, 0x59);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SampleOrmModelHasElements link in the same Partition as the given SampleOrmModel
		/// </summary>
		/// <param name="source">SampleOrmModel to use as the source of the relationship.</param>
		/// <param name="target">EntityElement to use as the target of the relationship.</param>
		public SampleOrmModelHasElements(SampleOrmModel source, EntityElement target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SampleOrmModelHasElements.SampleOrmModelDomainRoleId, source), new DslModeling::RoleAssignment(SampleOrmModelHasElements.ElementDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SampleOrmModelHasElements(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SampleOrmModelHasElements(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SampleOrmModelHasElements(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SampleOrmModelHasElements(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SampleOrmModel domain role code
		
		/// <summary>
		/// SampleOrmModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid SampleOrmModelDomainRoleId = new global::System.Guid(0xc8a68f81, 0x36d8, 0x4122, 0xbc, 0x46, 0x66, 0x67, 0x20, 0x74, 0xe7, 0x65);
		
		/// <summary>
		/// DomainRole SampleOrmModel
		/// </summary>
		[DslDesign::DisplayNameResource("Company.OrmLanguage.SampleOrmModelHasElements/SampleOrmModel.DisplayName", typeof(global::Company.OrmLanguage.OrmLanguageDomainModel), "Company.OrmLanguage.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.OrmLanguage.SampleOrmModelHasElements/SampleOrmModel.Description", typeof(global::Company.OrmLanguage.OrmLanguageDomainModel), "Company.OrmLanguage.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Elements", PropertyDisplayNameKey="Company.OrmLanguage.SampleOrmModelHasElements/SampleOrmModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("c8a68f81-36d8-4122-bc46-66672074e765")]
		public virtual SampleOrmModel SampleOrmModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SampleOrmModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, SampleOrmModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SampleOrmModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SampleOrmModel of a EntityElement
		/// <summary>
		/// Gets SampleOrmModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static SampleOrmModel GetSampleOrmModel(EntityElement element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ElementDomainRoleId) as SampleOrmModel;
		}
		
		/// <summary>
		/// Sets SampleOrmModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSampleOrmModel(EntityElement element, SampleOrmModel newSampleOrmModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ElementDomainRoleId, newSampleOrmModel);
		}
		#endregion
		#region Element domain role code
		
		/// <summary>
		/// Element domain role Id.
		/// </summary>
		public static readonly global::System.Guid ElementDomainRoleId = new global::System.Guid(0xea1dfb1c, 0x6090, 0x4ea8, 0xa5, 0x09, 0x0a, 0x2a, 0xda, 0x23, 0xda, 0x8f);
		
		/// <summary>
		/// DomainRole Element
		/// </summary>
		[DslDesign::DisplayNameResource("Company.OrmLanguage.SampleOrmModelHasElements/Element.DisplayName", typeof(global::Company.OrmLanguage.OrmLanguageDomainModel), "Company.OrmLanguage.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.OrmLanguage.SampleOrmModelHasElements/Element.Description", typeof(global::Company.OrmLanguage.OrmLanguageDomainModel), "Company.OrmLanguage.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SampleOrmModel", PropertyDisplayNameKey="Company.OrmLanguage.SampleOrmModelHasElements/Element.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("ea1dfb1c-6090-4ea8-a509-0a2ada23da8f")]
		public virtual EntityElement Element
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (EntityElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, ElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Elements of a SampleOrmModel
		/// <summary>
		/// Gets a list of Elements.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<EntityElement> GetElements(SampleOrmModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<EntityElement>, EntityElement>(element, SampleOrmModelDomainRoleId);
		}
		#endregion
		#region SampleOrmModel link accessor
		/// <summary>
		/// Get the list of SampleOrmModelHasElements links to a SampleOrmModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.OrmLanguage.SampleOrmModelHasElements> GetLinksToElements ( global::Company.OrmLanguage.SampleOrmModel sampleOrmModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.OrmLanguage.SampleOrmModelHasElements>(sampleOrmModelInstance, global::Company.OrmLanguage.SampleOrmModelHasElements.SampleOrmModelDomainRoleId);
		}
		#endregion
		#region Element link accessor
		/// <summary>
		/// Get the SampleOrmModelHasElements link to a EntityElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.OrmLanguage.SampleOrmModelHasElements GetLinkToSampleOrmModel (global::Company.OrmLanguage.EntityElement elementInstance)
		{
			global::System.Collections.Generic.IList<global::Company.OrmLanguage.SampleOrmModelHasElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.OrmLanguage.SampleOrmModelHasElements>(elementInstance, global::Company.OrmLanguage.SampleOrmModelHasElements.ElementDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Element not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SampleOrmModelHasElements instance accessors
		
		/// <summary>
		/// Get any SampleOrmModelHasElements links between a given SampleOrmModel and a EntityElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.OrmLanguage.SampleOrmModelHasElements> GetLinks( global::Company.OrmLanguage.SampleOrmModel source, global::Company.OrmLanguage.EntityElement target )
		{
			global::System.Collections.Generic.List<global::Company.OrmLanguage.SampleOrmModelHasElements> outLinks = new global::System.Collections.Generic.List<global::Company.OrmLanguage.SampleOrmModelHasElements>();
			global::System.Collections.Generic.IList<global::Company.OrmLanguage.SampleOrmModelHasElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.OrmLanguage.SampleOrmModelHasElements>(source, global::Company.OrmLanguage.SampleOrmModelHasElements.SampleOrmModelDomainRoleId);
			foreach ( global::Company.OrmLanguage.SampleOrmModelHasElements link in links )
			{
				if ( target.Equals(link.Element) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SampleOrmModelHasElements link between a given SampleOrmModeland a EntityElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.OrmLanguage.SampleOrmModelHasElements GetLink( global::Company.OrmLanguage.SampleOrmModel source, global::Company.OrmLanguage.EntityElement target )
		{
			global::System.Collections.Generic.IList<global::Company.OrmLanguage.SampleOrmModelHasElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.OrmLanguage.SampleOrmModelHasElements>(source, global::Company.OrmLanguage.SampleOrmModelHasElements.SampleOrmModelDomainRoleId);
			foreach ( global::Company.OrmLanguage.SampleOrmModelHasElements link in links )
			{
				if ( target.Equals(link.Element) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.OrmLanguage
{
	/// <summary>
	/// DomainRelationship EntityElementReferencesTargets
	/// Reference relationship between Elements.
	/// </summary>
	[DslDesign::DisplayNameResource("Company.OrmLanguage.EntityElementReferencesTargets.DisplayName", typeof(global::Company.OrmLanguage.OrmLanguageDomainModel), "Company.OrmLanguage.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.OrmLanguage.EntityElementReferencesTargets.Description", typeof(global::Company.OrmLanguage.OrmLanguageDomainModel), "Company.OrmLanguage.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.OrmLanguage.OrmLanguageDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("ef55e520-4922-4085-832c-d9e4aec366a5")]
	public partial class EntityElementReferencesTargets : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// EntityElementReferencesTargets domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xef55e520, 0x4922, 0x4085, 0x83, 0x2c, 0xd9, 0xe4, 0xae, 0xc3, 0x66, 0xa5);
	
				
		/// <summary>
		/// Constructor
		/// Creates a EntityElementReferencesTargets link in the same Partition as the given EntityElement
		/// </summary>
		/// <param name="source">EntityElement to use as the source of the relationship.</param>
		/// <param name="target">EntityElement to use as the target of the relationship.</param>
		public EntityElementReferencesTargets(EntityElement source, EntityElement target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(EntityElementReferencesTargets.SourceDomainRoleId, source), new DslModeling::RoleAssignment(EntityElementReferencesTargets.TargetDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityElementReferencesTargets(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityElementReferencesTargets(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityElementReferencesTargets(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityElementReferencesTargets(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Source domain role code
		
		/// <summary>
		/// Source domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceDomainRoleId = new global::System.Guid(0x6ac99220, 0x2b94, 0x49ae, 0xb5, 0x84, 0x54, 0x86, 0xe5, 0x9b, 0x16, 0xe0);
		
		/// <summary>
		/// DomainRole Source
		/// Description for Company.OrmLanguage.ExampleRelationship.Target
		/// </summary>
		[DslDesign::DisplayNameResource("Company.OrmLanguage.EntityElementReferencesTargets/Source.DisplayName", typeof(global::Company.OrmLanguage.OrmLanguageDomainModel), "Company.OrmLanguage.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.OrmLanguage.EntityElementReferencesTargets/Source.Description", typeof(global::Company.OrmLanguage.OrmLanguageDomainModel), "Company.OrmLanguage.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Targets", PropertyDisplayNameKey="Company.OrmLanguage.EntityElementReferencesTargets/Source.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("6ac99220-2b94-49ae-b584-5486e59b16e0")]
		public virtual EntityElement Source
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (EntityElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Sources of a EntityElement
		/// <summary>
		/// Gets a list of Sources.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<EntityElement> GetSources(EntityElement element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<EntityElement>, EntityElement>(element, TargetDomainRoleId);
		}
		#endregion
		#region Target domain role code
		
		/// <summary>
		/// Target domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetDomainRoleId = new global::System.Guid(0x7eac9a85, 0x47b3, 0x48a1, 0x9c, 0xdc, 0xe1, 0x48, 0xdf, 0x4e, 0x56, 0x7e);
		
		/// <summary>
		/// DomainRole Target
		/// Description for Company.OrmLanguage.ExampleRelationship.Source
		/// </summary>
		[DslDesign::DisplayNameResource("Company.OrmLanguage.EntityElementReferencesTargets/Target.DisplayName", typeof(global::Company.OrmLanguage.OrmLanguageDomainModel), "Company.OrmLanguage.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.OrmLanguage.EntityElementReferencesTargets/Target.Description", typeof(global::Company.OrmLanguage.OrmLanguageDomainModel), "Company.OrmLanguage.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Sources", PropertyDisplayNameKey="Company.OrmLanguage.EntityElementReferencesTargets/Target.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("7eac9a85-47b3-48a1-9cdc-e148df4e567e")]
		public virtual EntityElement Target
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (EntityElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Targets of a EntityElement
		/// <summary>
		/// Gets a list of Targets.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<EntityElement> GetTargets(EntityElement element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<EntityElement>, EntityElement>(element, SourceDomainRoleId);
		}
		#endregion
		#region Source link accessor
		/// <summary>
		/// Get the list of EntityElementReferencesTargets links to a EntityElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.OrmLanguage.EntityElementReferencesTargets> GetLinksToTargets ( global::Company.OrmLanguage.EntityElement sourceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.OrmLanguage.EntityElementReferencesTargets>(sourceInstance, global::Company.OrmLanguage.EntityElementReferencesTargets.SourceDomainRoleId);
		}
		#endregion
		#region Target link accessor
		/// <summary>
		/// Get the list of EntityElementReferencesTargets links to a EntityElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.OrmLanguage.EntityElementReferencesTargets> GetLinksToSources ( global::Company.OrmLanguage.EntityElement targetInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.OrmLanguage.EntityElementReferencesTargets>(targetInstance, global::Company.OrmLanguage.EntityElementReferencesTargets.TargetDomainRoleId);
		}
		#endregion
		#region EntityElementReferencesTargets instance accessors
		
		/// <summary>
		/// Get any EntityElementReferencesTargets links between a given EntityElement and a EntityElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.OrmLanguage.EntityElementReferencesTargets> GetLinks( global::Company.OrmLanguage.EntityElement source, global::Company.OrmLanguage.EntityElement target )
		{
			global::System.Collections.Generic.List<global::Company.OrmLanguage.EntityElementReferencesTargets> outLinks = new global::System.Collections.Generic.List<global::Company.OrmLanguage.EntityElementReferencesTargets>();
			global::System.Collections.Generic.IList<global::Company.OrmLanguage.EntityElementReferencesTargets> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.OrmLanguage.EntityElementReferencesTargets>(source, global::Company.OrmLanguage.EntityElementReferencesTargets.SourceDomainRoleId);
			foreach ( global::Company.OrmLanguage.EntityElementReferencesTargets link in links )
			{
				if ( target.Equals(link.Target) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one EntityElementReferencesTargets link between a given EntityElementand a EntityElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.OrmLanguage.EntityElementReferencesTargets GetLink( global::Company.OrmLanguage.EntityElement source, global::Company.OrmLanguage.EntityElement target )
		{
			global::System.Collections.Generic.IList<global::Company.OrmLanguage.EntityElementReferencesTargets> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.OrmLanguage.EntityElementReferencesTargets>(source, global::Company.OrmLanguage.EntityElementReferencesTargets.SourceDomainRoleId);
			foreach ( global::Company.OrmLanguage.EntityElementReferencesTargets link in links )
			{
				if ( target.Equals(link.Target) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.OrmLanguage
{
	/// <summary>
	/// DomainRelationship EntityHasProperties
	/// Description for Company.OrmLanguage.EntityHasProperties
	/// </summary>
	[DslDesign::DisplayNameResource("Company.OrmLanguage.EntityHasProperties.DisplayName", typeof(global::Company.OrmLanguage.OrmLanguageDomainModel), "Company.OrmLanguage.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.OrmLanguage.EntityHasProperties.Description", typeof(global::Company.OrmLanguage.OrmLanguageDomainModel), "Company.OrmLanguage.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.OrmLanguage.OrmLanguageDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("bde149c0-a73b-4848-848e-fe0ee2178c3b")]
	public partial class EntityHasProperties : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// EntityHasProperties domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xbde149c0, 0xa73b, 0x4848, 0x84, 0x8e, 0xfe, 0x0e, 0xe2, 0x17, 0x8c, 0x3b);
	
				
		/// <summary>
		/// Constructor
		/// Creates a EntityHasProperties link in the same Partition as the given EntityElement
		/// </summary>
		/// <param name="source">EntityElement to use as the source of the relationship.</param>
		/// <param name="target">EntityProperty to use as the target of the relationship.</param>
		public EntityHasProperties(EntityElement source, EntityProperty target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(EntityHasProperties.EntityElementDomainRoleId, source), new DslModeling::RoleAssignment(EntityHasProperties.EntityPropertyDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityHasProperties(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityHasProperties(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityHasProperties(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityHasProperties(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region EntityElement domain role code
		
		/// <summary>
		/// EntityElement domain role Id.
		/// </summary>
		public static readonly global::System.Guid EntityElementDomainRoleId = new global::System.Guid(0x2debbe78, 0xc609, 0x44af, 0xb5, 0x13, 0xf2, 0x83, 0xc9, 0x3d, 0x6d, 0x2f);
		
		/// <summary>
		/// DomainRole EntityElement
		/// Description for Company.OrmLanguage.EntityHasProperties.EntityElement
		/// </summary>
		[DslDesign::DisplayNameResource("Company.OrmLanguage.EntityHasProperties/EntityElement.DisplayName", typeof(global::Company.OrmLanguage.OrmLanguageDomainModel), "Company.OrmLanguage.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.OrmLanguage.EntityHasProperties/EntityElement.Description", typeof(global::Company.OrmLanguage.OrmLanguageDomainModel), "Company.OrmLanguage.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Properties", PropertyDisplayNameKey="Company.OrmLanguage.EntityHasProperties/EntityElement.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("2debbe78-c609-44af-b513-f283c93d6d2f")]
		public virtual EntityElement EntityElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (EntityElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, EntityElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EntityElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access EntityElement of a EntityProperty
		/// <summary>
		/// Gets EntityElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static EntityElement GetEntityElement(EntityProperty element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, EntityPropertyDomainRoleId) as EntityElement;
		}
		
		/// <summary>
		/// Sets EntityElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetEntityElement(EntityProperty element, EntityElement newEntityElement)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, EntityPropertyDomainRoleId, newEntityElement);
		}
		#endregion
		#region EntityProperty domain role code
		
		/// <summary>
		/// EntityProperty domain role Id.
		/// </summary>
		public static readonly global::System.Guid EntityPropertyDomainRoleId = new global::System.Guid(0x1a9b2d73, 0xc741, 0x43a6, 0xb4, 0x51, 0xd5, 0xa9, 0x9f, 0xd9, 0xc4, 0x70);
		
		/// <summary>
		/// DomainRole EntityProperty
		/// Description for Company.OrmLanguage.EntityHasProperties.EntityProperty
		/// </summary>
		[DslDesign::DisplayNameResource("Company.OrmLanguage.EntityHasProperties/EntityProperty.DisplayName", typeof(global::Company.OrmLanguage.OrmLanguageDomainModel), "Company.OrmLanguage.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.OrmLanguage.EntityHasProperties/EntityProperty.Description", typeof(global::Company.OrmLanguage.OrmLanguageDomainModel), "Company.OrmLanguage.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "EntityElement", PropertyDisplayNameKey="Company.OrmLanguage.EntityHasProperties/EntityProperty.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("1a9b2d73-c741-43a6-b451-d5a99fd9c470")]
		public virtual EntityProperty EntityProperty
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (EntityProperty)DslModeling::DomainRoleInfo.GetRolePlayer(this, EntityPropertyDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EntityPropertyDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Properties of a EntityElement
		/// <summary>
		/// Gets a list of Properties.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<EntityProperty> GetProperties(EntityElement element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<EntityProperty>, EntityProperty>(element, EntityElementDomainRoleId);
		}
		#endregion
		#region EntityElement link accessor
		/// <summary>
		/// Get the list of EntityHasProperties links to a EntityElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.OrmLanguage.EntityHasProperties> GetLinksToProperties ( global::Company.OrmLanguage.EntityElement entityElementInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.OrmLanguage.EntityHasProperties>(entityElementInstance, global::Company.OrmLanguage.EntityHasProperties.EntityElementDomainRoleId);
		}
		#endregion
		#region EntityProperty link accessor
		/// <summary>
		/// Get the EntityHasProperties link to a EntityProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.OrmLanguage.EntityHasProperties GetLinkToEntityElement (global::Company.OrmLanguage.EntityProperty entityPropertyInstance)
		{
			global::System.Collections.Generic.IList<global::Company.OrmLanguage.EntityHasProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.OrmLanguage.EntityHasProperties>(entityPropertyInstance, global::Company.OrmLanguage.EntityHasProperties.EntityPropertyDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of EntityProperty not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region EntityHasProperties instance accessors
		
		/// <summary>
		/// Get any EntityHasProperties links between a given EntityElement and a EntityProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.OrmLanguage.EntityHasProperties> GetLinks( global::Company.OrmLanguage.EntityElement source, global::Company.OrmLanguage.EntityProperty target )
		{
			global::System.Collections.Generic.List<global::Company.OrmLanguage.EntityHasProperties> outLinks = new global::System.Collections.Generic.List<global::Company.OrmLanguage.EntityHasProperties>();
			global::System.Collections.Generic.IList<global::Company.OrmLanguage.EntityHasProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.OrmLanguage.EntityHasProperties>(source, global::Company.OrmLanguage.EntityHasProperties.EntityElementDomainRoleId);
			foreach ( global::Company.OrmLanguage.EntityHasProperties link in links )
			{
				if ( target.Equals(link.EntityProperty) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one EntityHasProperties link between a given EntityElementand a EntityProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.OrmLanguage.EntityHasProperties GetLink( global::Company.OrmLanguage.EntityElement source, global::Company.OrmLanguage.EntityProperty target )
		{
			global::System.Collections.Generic.IList<global::Company.OrmLanguage.EntityHasProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.OrmLanguage.EntityHasProperties>(source, global::Company.OrmLanguage.EntityHasProperties.EntityElementDomainRoleId);
			foreach ( global::Company.OrmLanguage.EntityHasProperties link in links )
			{
				if ( target.Equals(link.EntityProperty) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
