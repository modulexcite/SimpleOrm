//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Company.OrmLanguage
{
	/// <summary>
	/// DomainRelationship SampleOrmModelHasElements
	/// Embedding relationship between the Model and Elements
	/// </summary>
	[DslDesign::DisplayNameResource("Company.OrmLanguage.SampleOrmModelHasElements.DisplayName", typeof(global::Company.OrmLanguage.OrmLanguageDomainModel), "Company.OrmLanguage.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.OrmLanguage.SampleOrmModelHasElements.Description", typeof(global::Company.OrmLanguage.OrmLanguageDomainModel), "Company.OrmLanguage.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.OrmLanguage.OrmLanguageDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("3a158a50-ceab-48e4-b9f1-5828c849ff59")]
	public partial class SampleOrmModelHasElements : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SampleOrmModelHasElements domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x3a158a50, 0xceab, 0x48e4, 0xb9, 0xf1, 0x58, 0x28, 0xc8, 0x49, 0xff, 0x59);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SampleOrmModelHasElements link in the same Partition as the given SampleOrmModel
		/// </summary>
		/// <param name="source">SampleOrmModel to use as the source of the relationship.</param>
		/// <param name="target">EntityElement to use as the target of the relationship.</param>
		public SampleOrmModelHasElements(SampleOrmModel source, EntityElement target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SampleOrmModelHasElements.SampleOrmModelDomainRoleId, source), new DslModeling::RoleAssignment(SampleOrmModelHasElements.ElementDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SampleOrmModelHasElements(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SampleOrmModelHasElements(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SampleOrmModelHasElements(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SampleOrmModelHasElements(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SampleOrmModel domain role code
		
		/// <summary>
		/// SampleOrmModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid SampleOrmModelDomainRoleId = new global::System.Guid(0xc8a68f81, 0x36d8, 0x4122, 0xbc, 0x46, 0x66, 0x67, 0x20, 0x74, 0xe7, 0x65);
		
		/// <summary>
		/// DomainRole SampleOrmModel
		/// </summary>
		[DslDesign::DisplayNameResource("Company.OrmLanguage.SampleOrmModelHasElements/SampleOrmModel.DisplayName", typeof(global::Company.OrmLanguage.OrmLanguageDomainModel), "Company.OrmLanguage.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.OrmLanguage.SampleOrmModelHasElements/SampleOrmModel.Description", typeof(global::Company.OrmLanguage.OrmLanguageDomainModel), "Company.OrmLanguage.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Elements", PropertyDisplayNameKey="Company.OrmLanguage.SampleOrmModelHasElements/SampleOrmModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("c8a68f81-36d8-4122-bc46-66672074e765")]
		public virtual SampleOrmModel SampleOrmModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SampleOrmModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, SampleOrmModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SampleOrmModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SampleOrmModel of a EntityElement
		/// <summary>
		/// Gets SampleOrmModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static SampleOrmModel GetSampleOrmModel(EntityElement element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ElementDomainRoleId) as SampleOrmModel;
		}
		
		/// <summary>
		/// Sets SampleOrmModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSampleOrmModel(EntityElement element, SampleOrmModel newSampleOrmModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ElementDomainRoleId, newSampleOrmModel);
		}
		#endregion
		#region Element domain role code
		
		/// <summary>
		/// Element domain role Id.
		/// </summary>
		public static readonly global::System.Guid ElementDomainRoleId = new global::System.Guid(0xea1dfb1c, 0x6090, 0x4ea8, 0xa5, 0x09, 0x0a, 0x2a, 0xda, 0x23, 0xda, 0x8f);
		
		/// <summary>
		/// DomainRole Element
		/// </summary>
		[DslDesign::DisplayNameResource("Company.OrmLanguage.SampleOrmModelHasElements/Element.DisplayName", typeof(global::Company.OrmLanguage.OrmLanguageDomainModel), "Company.OrmLanguage.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.OrmLanguage.SampleOrmModelHasElements/Element.Description", typeof(global::Company.OrmLanguage.OrmLanguageDomainModel), "Company.OrmLanguage.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SampleOrmModel", PropertyDisplayNameKey="Company.OrmLanguage.SampleOrmModelHasElements/Element.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("ea1dfb1c-6090-4ea8-a509-0a2ada23da8f")]
		public virtual EntityElement Element
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (EntityElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, ElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Elements of a SampleOrmModel
		/// <summary>
		/// Gets a list of Elements.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<EntityElement> GetElements(SampleOrmModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<EntityElement>, EntityElement>(element, SampleOrmModelDomainRoleId);
		}
		#endregion
		#region SampleOrmModel link accessor
		/// <summary>
		/// Get the list of SampleOrmModelHasElements links to a SampleOrmModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.OrmLanguage.SampleOrmModelHasElements> GetLinksToElements ( global::Company.OrmLanguage.SampleOrmModel sampleOrmModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.OrmLanguage.SampleOrmModelHasElements>(sampleOrmModelInstance, global::Company.OrmLanguage.SampleOrmModelHasElements.SampleOrmModelDomainRoleId);
		}
		#endregion
		#region Element link accessor
		/// <summary>
		/// Get the SampleOrmModelHasElements link to a EntityElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.OrmLanguage.SampleOrmModelHasElements GetLinkToSampleOrmModel (global::Company.OrmLanguage.EntityElement elementInstance)
		{
			global::System.Collections.Generic.IList<global::Company.OrmLanguage.SampleOrmModelHasElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.OrmLanguage.SampleOrmModelHasElements>(elementInstance, global::Company.OrmLanguage.SampleOrmModelHasElements.ElementDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Element not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SampleOrmModelHasElements instance accessors
		
		/// <summary>
		/// Get any SampleOrmModelHasElements links between a given SampleOrmModel and a EntityElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.OrmLanguage.SampleOrmModelHasElements> GetLinks( global::Company.OrmLanguage.SampleOrmModel source, global::Company.OrmLanguage.EntityElement target )
		{
			global::System.Collections.Generic.List<global::Company.OrmLanguage.SampleOrmModelHasElements> outLinks = new global::System.Collections.Generic.List<global::Company.OrmLanguage.SampleOrmModelHasElements>();
			global::System.Collections.Generic.IList<global::Company.OrmLanguage.SampleOrmModelHasElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.OrmLanguage.SampleOrmModelHasElements>(source, global::Company.OrmLanguage.SampleOrmModelHasElements.SampleOrmModelDomainRoleId);
			foreach ( global::Company.OrmLanguage.SampleOrmModelHasElements link in links )
			{
				if ( target.Equals(link.Element) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SampleOrmModelHasElements link between a given SampleOrmModeland a EntityElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.OrmLanguage.SampleOrmModelHasElements GetLink( global::Company.OrmLanguage.SampleOrmModel source, global::Company.OrmLanguage.EntityElement target )
		{
			global::System.Collections.Generic.IList<global::Company.OrmLanguage.SampleOrmModelHasElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.OrmLanguage.SampleOrmModelHasElements>(source, global::Company.OrmLanguage.SampleOrmModelHasElements.SampleOrmModelDomainRoleId);
			foreach ( global::Company.OrmLanguage.SampleOrmModelHasElements link in links )
			{
				if ( target.Equals(link.Element) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.OrmLanguage
{
	/// <summary>
	/// DomainRelationship EntityHasProperties
	/// Description for Company.OrmLanguage.EntityHasProperties
	/// </summary>
	[DslDesign::DisplayNameResource("Company.OrmLanguage.EntityHasProperties.DisplayName", typeof(global::Company.OrmLanguage.OrmLanguageDomainModel), "Company.OrmLanguage.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.OrmLanguage.EntityHasProperties.Description", typeof(global::Company.OrmLanguage.OrmLanguageDomainModel), "Company.OrmLanguage.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.OrmLanguage.OrmLanguageDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("bde149c0-a73b-4848-848e-fe0ee2178c3b")]
	public partial class EntityHasProperties : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// EntityHasProperties domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xbde149c0, 0xa73b, 0x4848, 0x84, 0x8e, 0xfe, 0x0e, 0xe2, 0x17, 0x8c, 0x3b);
	
				
		/// <summary>
		/// Constructor
		/// Creates a EntityHasProperties link in the same Partition as the given EntityElement
		/// </summary>
		/// <param name="source">EntityElement to use as the source of the relationship.</param>
		/// <param name="target">Property to use as the target of the relationship.</param>
		public EntityHasProperties(EntityElement source, Property target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(EntityHasProperties.EntityElementDomainRoleId, source), new DslModeling::RoleAssignment(EntityHasProperties.PropertyDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityHasProperties(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityHasProperties(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityHasProperties(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityHasProperties(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region EntityElement domain role code
		
		/// <summary>
		/// EntityElement domain role Id.
		/// </summary>
		public static readonly global::System.Guid EntityElementDomainRoleId = new global::System.Guid(0x2debbe78, 0xc609, 0x44af, 0xb5, 0x13, 0xf2, 0x83, 0xc9, 0x3d, 0x6d, 0x2f);
		
		/// <summary>
		/// DomainRole EntityElement
		/// Description for Company.OrmLanguage.EntityHasProperties.EntityElement
		/// </summary>
		[DslDesign::DisplayNameResource("Company.OrmLanguage.EntityHasProperties/EntityElement.DisplayName", typeof(global::Company.OrmLanguage.OrmLanguageDomainModel), "Company.OrmLanguage.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.OrmLanguage.EntityHasProperties/EntityElement.Description", typeof(global::Company.OrmLanguage.OrmLanguageDomainModel), "Company.OrmLanguage.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Properties", PropertyDisplayNameKey="Company.OrmLanguage.EntityHasProperties/EntityElement.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("2debbe78-c609-44af-b513-f283c93d6d2f")]
		public virtual EntityElement EntityElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (EntityElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, EntityElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EntityElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access EntityElement of a Property
		/// <summary>
		/// Gets EntityElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static EntityElement GetEntityElement(Property element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, PropertyDomainRoleId) as EntityElement;
		}
		
		/// <summary>
		/// Sets EntityElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetEntityElement(Property element, EntityElement newEntityElement)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, PropertyDomainRoleId, newEntityElement);
		}
		#endregion
		#region Property domain role code
		
		/// <summary>
		/// Property domain role Id.
		/// </summary>
		public static readonly global::System.Guid PropertyDomainRoleId = new global::System.Guid(0x1a9b2d73, 0xc741, 0x43a6, 0xb4, 0x51, 0xd5, 0xa9, 0x9f, 0xd9, 0xc4, 0x70);
		
		/// <summary>
		/// DomainRole Property
		/// Description for Company.OrmLanguage.EntityHasProperties.Property
		/// </summary>
		[DslDesign::DisplayNameResource("Company.OrmLanguage.EntityHasProperties/Property.DisplayName", typeof(global::Company.OrmLanguage.OrmLanguageDomainModel), "Company.OrmLanguage.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.OrmLanguage.EntityHasProperties/Property.Description", typeof(global::Company.OrmLanguage.OrmLanguageDomainModel), "Company.OrmLanguage.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "EntityElement", PropertyDisplayNameKey="Company.OrmLanguage.EntityHasProperties/Property.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("1a9b2d73-c741-43a6-b451-d5a99fd9c470")]
		public virtual Property Property
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Property)DslModeling::DomainRoleInfo.GetRolePlayer(this, PropertyDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PropertyDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Properties of a EntityElement
		/// <summary>
		/// Gets a list of Properties.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Property> GetProperties(EntityElement element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Property>, Property>(element, EntityElementDomainRoleId);
		}
		#endregion
		#region EntityElement link accessor
		/// <summary>
		/// Get the list of EntityHasProperties links to a EntityElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.OrmLanguage.EntityHasProperties> GetLinksToProperties ( global::Company.OrmLanguage.EntityElement entityElementInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.OrmLanguage.EntityHasProperties>(entityElementInstance, global::Company.OrmLanguage.EntityHasProperties.EntityElementDomainRoleId);
		}
		#endregion
		#region Property link accessor
		/// <summary>
		/// Get the EntityHasProperties link to a Property.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.OrmLanguage.EntityHasProperties GetLinkToEntityElement (global::Company.OrmLanguage.Property propertyInstance)
		{
			global::System.Collections.Generic.IList<global::Company.OrmLanguage.EntityHasProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.OrmLanguage.EntityHasProperties>(propertyInstance, global::Company.OrmLanguage.EntityHasProperties.PropertyDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Property not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region EntityHasProperties instance accessors
		
		/// <summary>
		/// Get any EntityHasProperties links between a given EntityElement and a Property.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.OrmLanguage.EntityHasProperties> GetLinks( global::Company.OrmLanguage.EntityElement source, global::Company.OrmLanguage.Property target )
		{
			global::System.Collections.Generic.List<global::Company.OrmLanguage.EntityHasProperties> outLinks = new global::System.Collections.Generic.List<global::Company.OrmLanguage.EntityHasProperties>();
			global::System.Collections.Generic.IList<global::Company.OrmLanguage.EntityHasProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.OrmLanguage.EntityHasProperties>(source, global::Company.OrmLanguage.EntityHasProperties.EntityElementDomainRoleId);
			foreach ( global::Company.OrmLanguage.EntityHasProperties link in links )
			{
				if ( target.Equals(link.Property) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one EntityHasProperties link between a given EntityElementand a Property.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.OrmLanguage.EntityHasProperties GetLink( global::Company.OrmLanguage.EntityElement source, global::Company.OrmLanguage.Property target )
		{
			global::System.Collections.Generic.IList<global::Company.OrmLanguage.EntityHasProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.OrmLanguage.EntityHasProperties>(source, global::Company.OrmLanguage.EntityHasProperties.EntityElementDomainRoleId);
			foreach ( global::Company.OrmLanguage.EntityHasProperties link in links )
			{
				if ( target.Equals(link.Property) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.OrmLanguage
{
	/// <summary>
	/// DomainRelationship EntityHasRelationShips
	/// Description for Company.OrmLanguage.EntityHasRelationShips
	/// </summary>
	[DslDesign::DisplayNameResource("Company.OrmLanguage.EntityHasRelationShips.DisplayName", typeof(global::Company.OrmLanguage.OrmLanguageDomainModel), "Company.OrmLanguage.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.OrmLanguage.EntityHasRelationShips.Description", typeof(global::Company.OrmLanguage.OrmLanguageDomainModel), "Company.OrmLanguage.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.OrmLanguage.OrmLanguageDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("33832f8d-6221-4dd5-a704-ceaa7c397002")]
	public partial class EntityHasRelationShips : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// EntityHasRelationShips domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x33832f8d, 0x6221, 0x4dd5, 0xa7, 0x04, 0xce, 0xaa, 0x7c, 0x39, 0x70, 0x02);
	
				
		/// <summary>
		/// Constructor
		/// Creates a EntityHasRelationShips link in the same Partition as the given EntityElement
		/// </summary>
		/// <param name="source">EntityElement to use as the source of the relationship.</param>
		/// <param name="target">EntityElement to use as the target of the relationship.</param>
		public EntityHasRelationShips(EntityElement source, EntityElement target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(EntityHasRelationShips.SourceEntityElementDomainRoleId, source), new DslModeling::RoleAssignment(EntityHasRelationShips.TargetEntityElementDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityHasRelationShips(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityHasRelationShips(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityHasRelationShips(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityHasRelationShips(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SourceEntityElement domain role code
		
		/// <summary>
		/// SourceEntityElement domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceEntityElementDomainRoleId = new global::System.Guid(0xabe224f7, 0x799d, 0x4ffe, 0xb6, 0x8b, 0xf6, 0xd5, 0x1c, 0x0e, 0x24, 0x09);
		
		/// <summary>
		/// DomainRole SourceEntityElement
		/// Description for Company.OrmLanguage.EntityHasRelationShips.SourceEntityElement
		/// </summary>
		[DslDesign::DisplayNameResource("Company.OrmLanguage.EntityHasRelationShips/SourceEntityElement.DisplayName", typeof(global::Company.OrmLanguage.OrmLanguageDomainModel), "Company.OrmLanguage.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.OrmLanguage.EntityHasRelationShips/SourceEntityElement.Description", typeof(global::Company.OrmLanguage.OrmLanguageDomainModel), "Company.OrmLanguage.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "EntityElements", PropertyDisplayNameKey="Company.OrmLanguage.EntityHasRelationShips/SourceEntityElement.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("abe224f7-799d-4ffe-b68b-f6d51c0e2409")]
		public virtual EntityElement SourceEntityElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (EntityElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceEntityElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceEntityElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SourceEntityElement of a EntityElement
		/// <summary>
		/// Gets SourceEntityElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static EntityElement GetSourceEntityElement(EntityElement element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TargetEntityElementDomainRoleId) as EntityElement;
		}
		
		/// <summary>
		/// Sets SourceEntityElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSourceEntityElement(EntityElement element, EntityElement newSourceEntityElement)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TargetEntityElementDomainRoleId, newSourceEntityElement);
		}
		#endregion
		#region TargetEntityElement domain role code
		
		/// <summary>
		/// TargetEntityElement domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetEntityElementDomainRoleId = new global::System.Guid(0x41ce1527, 0x7ae6, 0x4c4a, 0xa3, 0x92, 0x6c, 0xc5, 0x8e, 0x7b, 0x5f, 0x3f);
		
		/// <summary>
		/// DomainRole TargetEntityElement
		/// Description for Company.OrmLanguage.EntityHasRelationShips.TargetEntityElement
		/// </summary>
		[DslDesign::DisplayNameResource("Company.OrmLanguage.EntityHasRelationShips/TargetEntityElement.DisplayName", typeof(global::Company.OrmLanguage.OrmLanguageDomainModel), "Company.OrmLanguage.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.OrmLanguage.EntityHasRelationShips/TargetEntityElement.Description", typeof(global::Company.OrmLanguage.OrmLanguageDomainModel), "Company.OrmLanguage.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SourceEntityElement", PropertyDisplayNameKey="Company.OrmLanguage.EntityHasRelationShips/TargetEntityElement.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("41ce1527-7ae6-4c4a-a392-6cc58e7b5f3f")]
		public virtual EntityElement TargetEntityElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (EntityElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetEntityElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetEntityElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access EntityElements of a EntityElement
		/// <summary>
		/// Gets a list of EntityElements.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<EntityElement> GetEntityElements(EntityElement element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<EntityElement>, EntityElement>(element, SourceEntityElementDomainRoleId);
		}
		#endregion
		#region fromProperty domain property code
		
		/// <summary>
		/// fromProperty domain property Id.
		/// </summary>
		public static readonly global::System.Guid fromPropertyDomainPropertyId = new global::System.Guid(0x2d5672af, 0xc4c7, 0x4508, 0xb1, 0x9f, 0x2b, 0xfb, 0x13, 0x32, 0x16, 0x64);
		
		/// <summary>
		/// Storage for fromProperty
		/// </summary>
		private global::System.Guid fromPropertyPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of fromProperty domain property.
		/// Description for Company.OrmLanguage.EntityHasRelationShips.From Property
		/// </summary>
		[DslDesign::DisplayNameResource("Company.OrmLanguage.EntityHasRelationShips/fromProperty.DisplayName", typeof(global::Company.OrmLanguage.OrmLanguageDomainModel), "Company.OrmLanguage.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.OrmLanguage.EntityHasRelationShips/fromProperty.Description", typeof(global::Company.OrmLanguage.OrmLanguageDomainModel), "Company.OrmLanguage.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("2d5672af-c4c7-4508-b19f-2bfb13321664")]
		public global::System.Guid fromProperty
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return fromPropertyPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				fromPropertyPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EntityHasRelationShips.fromProperty domain property.
		/// </summary>
		internal sealed partial class fromPropertyPropertyHandler : DslModeling::DomainPropertyValueHandler<EntityHasRelationShips, global::System.Guid>
		{
			private fromPropertyPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EntityHasRelationShips.fromProperty domain property value handler.
			/// </summary>
			public static readonly fromPropertyPropertyHandler Instance = new fromPropertyPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EntityHasRelationShips.fromProperty domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return fromPropertyDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Guid GetValue(EntityHasRelationShips element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.fromPropertyPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntityHasRelationShips element, global::System.Guid newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Guid oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.fromPropertyPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region toProperty domain property code
		
		/// <summary>
		/// toProperty domain property Id.
		/// </summary>
		public static readonly global::System.Guid toPropertyDomainPropertyId = new global::System.Guid(0x681e85b9, 0xdd7b, 0x4970, 0x98, 0x5a, 0x2e, 0xca, 0x85, 0xa5, 0xd4, 0x49);
		
		/// <summary>
		/// Storage for toProperty
		/// </summary>
		private global::System.Guid toPropertyPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of toProperty domain property.
		/// Description for Company.OrmLanguage.EntityHasRelationShips.To Property
		/// </summary>
		[DslDesign::DisplayNameResource("Company.OrmLanguage.EntityHasRelationShips/toProperty.DisplayName", typeof(global::Company.OrmLanguage.OrmLanguageDomainModel), "Company.OrmLanguage.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.OrmLanguage.EntityHasRelationShips/toProperty.Description", typeof(global::Company.OrmLanguage.OrmLanguageDomainModel), "Company.OrmLanguage.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("681e85b9-dd7b-4970-985a-2eca85a5d449")]
		public global::System.Guid toProperty
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return toPropertyPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				toPropertyPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EntityHasRelationShips.toProperty domain property.
		/// </summary>
		internal sealed partial class toPropertyPropertyHandler : DslModeling::DomainPropertyValueHandler<EntityHasRelationShips, global::System.Guid>
		{
			private toPropertyPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EntityHasRelationShips.toProperty domain property value handler.
			/// </summary>
			public static readonly toPropertyPropertyHandler Instance = new toPropertyPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EntityHasRelationShips.toProperty domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return toPropertyDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Guid GetValue(EntityHasRelationShips element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.toPropertyPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntityHasRelationShips element, global::System.Guid newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Guid oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.toPropertyPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region SourceEntityElement link accessor
		/// <summary>
		/// Get the list of EntityHasRelationShips links to a EntityElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.OrmLanguage.EntityHasRelationShips> GetLinksToEntityElements ( global::Company.OrmLanguage.EntityElement sourceEntityElementInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.OrmLanguage.EntityHasRelationShips>(sourceEntityElementInstance, global::Company.OrmLanguage.EntityHasRelationShips.SourceEntityElementDomainRoleId);
		}
		#endregion
		#region TargetEntityElement link accessor
		/// <summary>
		/// Get the EntityHasRelationShips link to a EntityElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.OrmLanguage.EntityHasRelationShips GetLinkToSourceEntityElement (global::Company.OrmLanguage.EntityElement targetEntityElementInstance)
		{
			global::System.Collections.Generic.IList<global::Company.OrmLanguage.EntityHasRelationShips> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.OrmLanguage.EntityHasRelationShips>(targetEntityElementInstance, global::Company.OrmLanguage.EntityHasRelationShips.TargetEntityElementDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of TargetEntityElement not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region EntityHasRelationShips instance accessors
		
		/// <summary>
		/// Get any EntityHasRelationShips links between a given EntityElement and a EntityElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.OrmLanguage.EntityHasRelationShips> GetLinks( global::Company.OrmLanguage.EntityElement source, global::Company.OrmLanguage.EntityElement target )
		{
			global::System.Collections.Generic.List<global::Company.OrmLanguage.EntityHasRelationShips> outLinks = new global::System.Collections.Generic.List<global::Company.OrmLanguage.EntityHasRelationShips>();
			global::System.Collections.Generic.IList<global::Company.OrmLanguage.EntityHasRelationShips> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.OrmLanguage.EntityHasRelationShips>(source, global::Company.OrmLanguage.EntityHasRelationShips.SourceEntityElementDomainRoleId);
			foreach ( global::Company.OrmLanguage.EntityHasRelationShips link in links )
			{
				if ( target.Equals(link.TargetEntityElement) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one EntityHasRelationShips link between a given EntityElementand a EntityElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.OrmLanguage.EntityHasRelationShips GetLink( global::Company.OrmLanguage.EntityElement source, global::Company.OrmLanguage.EntityElement target )
		{
			global::System.Collections.Generic.IList<global::Company.OrmLanguage.EntityHasRelationShips> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.OrmLanguage.EntityHasRelationShips>(source, global::Company.OrmLanguage.EntityHasRelationShips.SourceEntityElementDomainRoleId);
			foreach ( global::Company.OrmLanguage.EntityHasRelationShips link in links )
			{
				if ( target.Equals(link.TargetEntityElement) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.OrmLanguage
{
	/// <summary>
	/// DomainRelationship EntityHasReferences
	/// Description for Company.OrmLanguage.EntityHasReferences
	/// </summary>
	[DslDesign::DisplayNameResource("Company.OrmLanguage.EntityHasReferences.DisplayName", typeof(global::Company.OrmLanguage.OrmLanguageDomainModel), "Company.OrmLanguage.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.OrmLanguage.EntityHasReferences.Description", typeof(global::Company.OrmLanguage.OrmLanguageDomainModel), "Company.OrmLanguage.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.OrmLanguage.OrmLanguageDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("e16ebd6e-090f-418b-9d1f-845d24718934")]
	public partial class EntityHasReferences : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// EntityHasReferences domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe16ebd6e, 0x090f, 0x418b, 0x9d, 0x1f, 0x84, 0x5d, 0x24, 0x71, 0x89, 0x34);
	
				
		/// <summary>
		/// Constructor
		/// Creates a EntityHasReferences link in the same Partition as the given EntityElement
		/// </summary>
		/// <param name="source">EntityElement to use as the source of the relationship.</param>
		/// <param name="target">Reference to use as the target of the relationship.</param>
		public EntityHasReferences(EntityElement source, Reference target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(EntityHasReferences.EntityElementDomainRoleId, source), new DslModeling::RoleAssignment(EntityHasReferences.ReferenceDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityHasReferences(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityHasReferences(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityHasReferences(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityHasReferences(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region EntityElement domain role code
		
		/// <summary>
		/// EntityElement domain role Id.
		/// </summary>
		public static readonly global::System.Guid EntityElementDomainRoleId = new global::System.Guid(0xa028db9b, 0xed0f, 0x4735, 0xa8, 0x77, 0x75, 0xea, 0x8e, 0xa5, 0x2b, 0xd1);
		
		/// <summary>
		/// DomainRole EntityElement
		/// Description for Company.OrmLanguage.EntityHasReferences.EntityElement
		/// </summary>
		[DslDesign::DisplayNameResource("Company.OrmLanguage.EntityHasReferences/EntityElement.DisplayName", typeof(global::Company.OrmLanguage.OrmLanguageDomainModel), "Company.OrmLanguage.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.OrmLanguage.EntityHasReferences/EntityElement.Description", typeof(global::Company.OrmLanguage.OrmLanguageDomainModel), "Company.OrmLanguage.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "References", PropertyDisplayNameKey="Company.OrmLanguage.EntityHasReferences/EntityElement.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("a028db9b-ed0f-4735-a877-75ea8ea52bd1")]
		public virtual EntityElement EntityElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (EntityElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, EntityElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EntityElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access EntityElement of a Reference
		/// <summary>
		/// Gets EntityElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static EntityElement GetEntityElement(Reference element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ReferenceDomainRoleId) as EntityElement;
		}
		
		/// <summary>
		/// Sets EntityElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetEntityElement(Reference element, EntityElement newEntityElement)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ReferenceDomainRoleId, newEntityElement);
		}
		#endregion
		#region Reference domain role code
		
		/// <summary>
		/// Reference domain role Id.
		/// </summary>
		public static readonly global::System.Guid ReferenceDomainRoleId = new global::System.Guid(0x995c88e4, 0x65cc, 0x4a0f, 0xbb, 0xf0, 0x10, 0xe0, 0x38, 0x5b, 0x7e, 0xf0);
		
		/// <summary>
		/// DomainRole Reference
		/// Description for Company.OrmLanguage.EntityHasReferences.Reference
		/// </summary>
		[DslDesign::DisplayNameResource("Company.OrmLanguage.EntityHasReferences/Reference.DisplayName", typeof(global::Company.OrmLanguage.OrmLanguageDomainModel), "Company.OrmLanguage.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.OrmLanguage.EntityHasReferences/Reference.Description", typeof(global::Company.OrmLanguage.OrmLanguageDomainModel), "Company.OrmLanguage.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "EntityElement", PropertyDisplayNameKey="Company.OrmLanguage.EntityHasReferences/Reference.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("995c88e4-65cc-4a0f-bbf0-10e0385b7ef0")]
		public virtual Reference Reference
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Reference)DslModeling::DomainRoleInfo.GetRolePlayer(this, ReferenceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ReferenceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access References of a EntityElement
		/// <summary>
		/// Gets a list of References.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Reference> GetReferences(EntityElement element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Reference>, Reference>(element, EntityElementDomainRoleId);
		}
		#endregion
		#region EntityElement link accessor
		/// <summary>
		/// Get the list of EntityHasReferences links to a EntityElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.OrmLanguage.EntityHasReferences> GetLinksToReferences ( global::Company.OrmLanguage.EntityElement entityElementInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.OrmLanguage.EntityHasReferences>(entityElementInstance, global::Company.OrmLanguage.EntityHasReferences.EntityElementDomainRoleId);
		}
		#endregion
		#region Reference link accessor
		/// <summary>
		/// Get the EntityHasReferences link to a Reference.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.OrmLanguage.EntityHasReferences GetLinkToEntityElement (global::Company.OrmLanguage.Reference referenceInstance)
		{
			global::System.Collections.Generic.IList<global::Company.OrmLanguage.EntityHasReferences> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.OrmLanguage.EntityHasReferences>(referenceInstance, global::Company.OrmLanguage.EntityHasReferences.ReferenceDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Reference not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region EntityHasReferences instance accessors
		
		/// <summary>
		/// Get any EntityHasReferences links between a given EntityElement and a Reference.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.OrmLanguage.EntityHasReferences> GetLinks( global::Company.OrmLanguage.EntityElement source, global::Company.OrmLanguage.Reference target )
		{
			global::System.Collections.Generic.List<global::Company.OrmLanguage.EntityHasReferences> outLinks = new global::System.Collections.Generic.List<global::Company.OrmLanguage.EntityHasReferences>();
			global::System.Collections.Generic.IList<global::Company.OrmLanguage.EntityHasReferences> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.OrmLanguage.EntityHasReferences>(source, global::Company.OrmLanguage.EntityHasReferences.EntityElementDomainRoleId);
			foreach ( global::Company.OrmLanguage.EntityHasReferences link in links )
			{
				if ( target.Equals(link.Reference) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one EntityHasReferences link between a given EntityElementand a Reference.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.OrmLanguage.EntityHasReferences GetLink( global::Company.OrmLanguage.EntityElement source, global::Company.OrmLanguage.Reference target )
		{
			global::System.Collections.Generic.IList<global::Company.OrmLanguage.EntityHasReferences> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.OrmLanguage.EntityHasReferences>(source, global::Company.OrmLanguage.EntityHasReferences.EntityElementDomainRoleId);
			foreach ( global::Company.OrmLanguage.EntityHasReferences link in links )
			{
				if ( target.Equals(link.Reference) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
