<#+
private void GenerateMonikerAmbiguityValidation(DslLibrary dslLibrary)
{
	Dsl dsl = dslLibrary as Dsl;
	if (dsl == null || dsl.Editor == null || dsl.Editor.RootClass == null)
	{
#>
// No MonikerAmbiguityValidation generated because the input is not a DSL definition with a specified RootClass.
//
<#+
		return;
	}
	DomainClass domainClass = dsl.Editor.RootClass;
	string namespaceString = domainClass.Namespace;
	
	OpenNamespace(namespaceString);
#>
[DslValidation::ValidationState(DslValidation::ValidationState.Enabled)]
<#= CodeGenerationUtilities.GetTypeAccessModifier(domainClass.AccessModifier) #><#= CodeGenerationUtilities.GetGenerationInheritanceModifier(domainClass) #> partial class <#= CodeGenerationUtilities.GetGenerationClassName(domainClass) #>
{
	/// <summary>
	/// Check to make sure all elements in the model will have unambiguous monikers when serialized.
	/// </summary>
	[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Justification = "Generated code.")]
	[DslValidation::ValidationMethod(DslValidation::ValidationCategories.Load | DslValidation::ValidationCategories.Save | DslValidation::ValidationCategories.Menu)]
<#+
	if (domainClass.GeneratesDoubleDerived)
	{
#>
	protected virtual void ValidateMonikerAmbiguity(DslValidation::ValidationContext context)
<#+
	}
	else
	{
#>
	private void ValidateMonikerAmbiguity(DslValidation::ValidationContext context)
<#+
	}
#>
	{
		// Don't run this rule when deserializing - any ambiguous monikers will 
		// already have stopped the file from loading.
		if (this.Store.InSerializationTransaction)
		{
			return;
		}
	
		global::System.Collections.Generic.IDictionary<global::System.Guid, DslModeling::IMonikerResolver> monikerResolvers = <#= dslLibrary.GetRelativeName(namespaceString, true) #>SerializationHelper.Instance.GetMonikerResolvers(this.Store);
		foreach (DslModeling::ModelElement element in this.Store.ElementDirectory.AllElements)
		{
			global::System.Guid domainModelId = element.GetDomainClass().DomainModel.Id;
			DslModeling::IMonikerResolver monikerResolver = null;
			if (monikerResolvers.TryGetValue(domainModelId, out monikerResolver) && monikerResolver != null)
			{
				DslModeling::SimpleMonikerResolver simpleMonikerResolver = monikerResolver as DslModeling::SimpleMonikerResolver;
				if (simpleMonikerResolver != null)
				{
					try
					{
						simpleMonikerResolver.ProcessAddedElement(element);
					}
					catch (DslModeling::AmbiguousMonikerException amEx)
					{	// Ambiguous moniker detected.
						context.LogError(
							string.Format(
								global::System.Globalization.CultureInfo.CurrentCulture,
								<#= dslLibrary.GetRelativeName(namespaceString, true) #>DomainModel.SingletonResourceManager.GetString("AmbiguousMoniker"),
								amEx.Moniker,
								DslModeling::SerializationUtilities.GetElementName(element),
								DslModeling::SerializationUtilities.GetElementName(amEx.Element)
							),
							"AmbiguousMoniker", 
							this,
							amEx.Element
						);
					}
				}
			}
		}
		// Clean up the created moniker resolvers after the check.
		foreach (DslModeling::IMonikerResolver monikerResolver in monikerResolvers.Values)
		{
			DslModeling::SimpleMonikerResolver simpleMonikerResolver = monikerResolver as DslModeling::SimpleMonikerResolver;
			if (simpleMonikerResolver != null)
				simpleMonikerResolver.Reset();
		}
		monikerResolvers.Clear();
	}
}
<#+

	CloseNamespace();
}
#>
