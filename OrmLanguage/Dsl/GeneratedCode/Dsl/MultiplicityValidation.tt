<#@ template inherits="Microsoft.VisualStudio.TextTemplating.VSHost.ModelingTextTransformation" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Globalization" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ output extension=".cs" #>
<#@ include file="Dsl\DomainClass.tt" #>
<#@ include file="Dsl\DomainProperty.tt" #>
<#@ include file="Dsl\DomainRole.tt" #>
<#@ include file="Dsl\Utilities.tt" #>
<#@ include file="Dsl\Closures.tt" #>
<#@ include file="Dsl\Merge.tt" #>
<#@ include file="Dsl\PathMerge.tt" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
using DslValidation = global::Microsoft.VisualStudio.Modeling.Validation;
<#
	foreach (DomainClass domainClass in this.DslLibrary.Classes)
	{
		bool started = false;
		string namespaceString = domainClass.Namespace;

		foreach (DomainRole role in domainClass.RolesPlayed)
		{
			if (role.Relationship.IsEmbedding && !role.IsSource) continue;
			
			if (role.Multiplicity == Microsoft.VisualStudio.Modeling.DslDefinition.Multiplicity.One
				|| role.Multiplicity == Microsoft.VisualStudio.Modeling.DslDefinition.Multiplicity.OneMany)
			{
				bool roleIsMany = role.Multiplicity == Microsoft.VisualStudio.Modeling.DslDefinition.Multiplicity.OneMany;
				if (!started)
				{
					started = true;
					if(!string.IsNullOrEmpty(namespaceString))
					{
#>
namespace <#= namespaceString #>
{
<#
						PushIndent("\t");
					}
#>
[DslValidation::ValidationState(DslValidation::ValidationState.Enabled)]
<#= CodeGenerationUtilities.GetTypeAccessModifier(domainClass.AccessModifier) #><#= CodeGenerationUtilities.GetGenerationInheritanceModifier(domainClass) #> partial class <#= CodeGenerationUtilities.GetGenerationClassName(domainClass) #>
{
	/// <summary>
	/// Checks that the relationships that have a multiplicity of One or OneMany do actually have a link.
	/// </summary>
	[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Justification = "Generated code.")]
	[DslValidation::ValidationMethod(DslValidation::ValidationCategories.Open | DslValidation::ValidationCategories.Save | DslValidation::ValidationCategories.Menu)]
	private void Validate<#= CodeGenerationUtilities.GetGenerationClassName(domainClass) #>Multiplicity (DslValidation::ValidationContext context)
	{
<#
				} // started
				string itemNameExpression = "\"\"";
				DomainProperty nameProperty = CodeGenerationUtilities.GetNameProperty(domainClass);
				if (nameProperty != null) itemNameExpression = "this." + nameProperty.Name;
				
				if (role.IsPropertyGenerator && !(role.PropertyGetterAccessModifier == AccessModifier.Family || role.PropertyGetterAccessModifier == AccessModifier.Private ))
				{
#>		if (this.<#= role.PropertyName #><#= roleIsMany ? ".Count == 0" : " == null" #>)
		{
<#
				}
				else
				{
					if (CodeGenerationUtilities.IsMultiple( role.Multiplicity))
					{
#>		if ( <#= role.Relationship.GetFullName(true) #>.Get<#= role.PropertyName.TrimStart('@') #>( this).Count == 0)
		{
<#
					}
					else
					{
 #>		if ( <#= role.Relationship.GetFullName(true) #>.Get<#= role.PropertyName.TrimStart('@') #>( this) == null )
		{
<#
					}
				}

#>
			context.LogViolation(DslValidation::ViolationType.Error,
				string.Format(global::System.Globalization.CultureInfo.CurrentCulture, 
					<#= this.DslLibrary.Namespace #>.<#= this.DslLibrary.Name #>DomainModel.SingletonResourceManager.GetString("MinimumMultiplicityMissingLink"), 
					"<#= domainClass.Name #>", <#= itemNameExpression #>, "<#= role.PropertyName #>"),
					"DSL0001", this);
		}
<#
			}
		}
		if (started)
		{
#>
	} // Validate<#= CodeGenerationUtilities.GetGenerationClassName(domainClass) #>Multiplicity
} // class <#= CodeGenerationUtilities.GetGenerationClassName(domainClass) #>
<#
			if(!string.IsNullOrEmpty(namespaceString))
			{
				PopIndent();
#>
} // <#= namespaceString #>

<#
			}
		}
	}
	
#>	