<#+
///<summary>
///Emits a type descriptor factory and an empty type descriptor for the user to extend
// for the specified domain class
///</summary>
private void GenerateCustomTypeDescriptor(DomainClass domainClass, string baseClassName)
{

	string className = CodeGenerationUtilities.GetGenerationClassName(domainClass);
#>

/// <summary>
/// Factory class for <#=className#> type descriptors.
/// Double-derived class to allow easier code customization.
/// </summary>
internal sealed partial class <#=className#>TypeDescriptionProvider : <#=className#>TypeDescriptionProviderBase
{
	/// <summary>
	/// Constructor
	/// </summary>
	public <#= className #>TypeDescriptionProvider()
	{
	}
	
}

/// <summary>
/// Base factory class for <#=className#> type descriptors.
/// </summary>
abstract internal class <#=className#>TypeDescriptionProviderBase : DslDesign::ElementTypeDescriptionProvider
{
	/// <summary>
	/// Called by the System.ComponentModel framework when it requires a type descriptor instance.
	/// </summary>
	protected override DslDesign::ElementTypeDescriptor CreateTypeDescriptor(global::System.ComponentModel.ICustomTypeDescriptor parent, DslModeling::ModelElement element)
	{
		return new <#=className#>TypeDescriptor(parent, element);
	}
}

/// <summary>
/// Custom type descriptor class for <#=className#> elements.
/// </summary>
public partial class <#=className#>TypeDescriptor : <#=baseClassName#>
{
	/// <summary>
	/// Constructor
	/// </summary>
	public <#=className#>TypeDescriptor(global::System.ComponentModel.ICustomTypeDescriptor parent, 
										DslModeling::ModelElement selectedElement)
		: base(parent, selectedElement)
	{
	}

	/// <summary>
	/// Constructor
	/// </summary>
	public <#= className #>TypeDescriptor(global::System.ComponentModel.ICustomTypeDescriptor parent,
											global::System.Type modelElementType)
		: base(parent, modelElementType)
	{
	}

	public override global::System.ComponentModel.PropertyDescriptorCollection GetProperties(global::System.Attribute[] attributes)
	{
		// The following method needs to be added in a partial class
		//   private override global::System.ComponentModel.PropertyDescriptorCollection GetCustomProperties(global::System.Attribute[] attributes)
		// The skeleton of a suggested method is provided in the comment below.
		return this.GetCustomProperties(attributes);

	}

	// EXAMPLE "GetCustomProperties" METHOD
	///// <summary>
	///// Returns a collection of property descriptors an instance of <#=className#>.
	///// </summary>
	//private global::System.ComponentModel.PropertyDescriptorCollection GetCustomProperties(global::System.Attribute[] attributes)
	//{
	//    // Get the default property descriptors from the base class
	//    global::System.ComponentModel.PropertyDescriptorCollection propertyDescriptors = base.GetProperties(attributes);

	//    // Get a reference to the model element that is being described.
	//    <#=className#> source = this.ModelElement as <#=className#>;
	//    if (source != null)
	//    {
	//        //Add in extra custom properties here...
	//    }

	//    // Return the property descriptors for this element
	//    return propertyDescriptors;
	//}

}


<#+

}
#>