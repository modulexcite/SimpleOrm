<#@ template inherits="Microsoft.VisualStudio.TextTemplating.VSHost.ModelingTextTransformation" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="Dsl\PathMerge.tt" #>
<#@ include file="Dsl\CustomTypeDescriptors.tt" #>
<#@ include file="Dsl\PropertyPathTypeDescriptors.tt" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

<#
	List<DomainClass> classesWithDomainTypeDescriptors = new List<DomainClass>();
	
	foreach(DomainClass domainClass in this.DslLibrary.Classes)
	{
		if(CodeGenerationUtilities.HasCustomTypeDescriptor(domainClass))
		{
			classesWithDomainTypeDescriptors.Add(domainClass);
		}
	}
	
	foreach(DomainRelationship domainRel in this.DslLibrary.Relationships)
	{
		if(CodeGenerationUtilities.HasCustomTypeDescriptor(domainRel))
		{
			classesWithDomainTypeDescriptors.Add(domainRel);
		}
	}
	
	if(classesWithDomainTypeDescriptors.Count == 0)
	{
#>
//
// This file contains no code because there are no DomainTypeDescriptors defined for this DSL.
//
<#
	}
	else
	{
#>

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;

<#
		foreach(DomainClass domainClass in classesWithDomainTypeDescriptors)
		{
			string namespaceString = domainClass.Namespace;
			
			string baseClassName = "DslDesign::ElementTypeDescriptor";
			DomainClass baseClass = domainClass.BaseClass;
			while(baseClass != null)
			{
				if(CodeGenerationUtilities.HasCustomTypeDescriptor(baseClass))
				{
					string baseNamespace = String.Empty;
					if(!string.IsNullOrEmpty(baseClass.Namespace))
					{
						baseNamespace = baseClass.Namespace + ".";
					}
					baseClassName = "global::" + baseNamespace + CodeGenerationUtilities.GetGenerationClassName(baseClass) + "TypeDescriptor";
					break; // found the nearest custom type descriptor class in the inheritance hierarchy, so stop looking.
				}
				baseClass = baseClass.BaseClass;
			}
#>
#region Custom property definitions for <#= domainClass.Name #>
<#
			if(!string.IsNullOrEmpty(namespaceString))
			{
#>
namespace <#= namespaceString #>
{
<#
				PushIndent("\t");
			}

			// Generate the appropriate type of custom type descriptor
			if (domainClass.CustomTypeDescriptor.CustomCoded)
			{
				this.GenerateCustomTypeDescriptor(domainClass, baseClassName);
			}
			else
			{
				this.GeneratePropertyPathTypeDescriptor(domainClass, baseClassName);
			}

			if(!string.IsNullOrEmpty(namespaceString))
			{
				PopIndent();
#>
}
<#
			}
#>
#endregion
<#
		} // foreach(DomainClass)
	}

#>