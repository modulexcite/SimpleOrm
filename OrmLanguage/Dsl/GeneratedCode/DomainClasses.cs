//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Company.OrmLanguage
{
	/// <summary>
	/// DomainClass SampleOrmModel
	/// The root in which all other elements are embedded. Appears as a diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("Company.OrmLanguage.SampleOrmModel.DisplayName", typeof(global::Company.OrmLanguage.OrmLanguageDomainModel), "Company.OrmLanguage.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.OrmLanguage.SampleOrmModel.Description", typeof(global::Company.OrmLanguage.OrmLanguageDomainModel), "Company.OrmLanguage.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.OrmLanguage.OrmLanguageDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("583ad1fe-b130-4778-a99a-ddfa88829f94")]
	public partial class SampleOrmModel : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// SampleOrmModel domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x583ad1fe, 0xb130, 0x4778, 0xa9, 0x9a, 0xdd, 0xfa, 0x88, 0x82, 0x9f, 0x94);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SampleOrmModel(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SampleOrmModel(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Elements opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Elements.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<EntityElement> Elements
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<EntityElement>, EntityElement>(global::Company.OrmLanguage.SampleOrmModelHasElements.SampleOrmModelDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.OrmLanguage.EntityElement.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Company.OrmLanguage.EntityElement sourceEntityElement1 = sourceElement as global::Company.OrmLanguage.EntityElement;
			if (sourceEntityElement1 != null)
			{
				// Create link for path SampleOrmModelHasElements.Elements
				this.Elements.Add(sourceEntityElement1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Company.OrmLanguage.EntityElement sourceEntityElement1 = sourceElement as global::Company.OrmLanguage.EntityElement;
			if (sourceEntityElement1 != null)
			{
				// Delete link for path SampleOrmModelHasElements.Elements
				
				foreach (DslModeling::ElementLink link in global::Company.OrmLanguage.SampleOrmModelHasElements.GetLinks((global::Company.OrmLanguage.SampleOrmModel)this, sourceEntityElement1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.OrmLanguage.SampleOrmModelHasElements.SampleOrmModelDomainRoleId, global::Company.OrmLanguage.SampleOrmModelHasElements.ElementDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Company.OrmLanguage
{
	/// <summary>
	/// DomainClass EntityElement
	/// Elements embedded in the model. Appear as boxes on the diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("Company.OrmLanguage.EntityElement.DisplayName", typeof(global::Company.OrmLanguage.OrmLanguageDomainModel), "Company.OrmLanguage.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.OrmLanguage.EntityElement.Description", typeof(global::Company.OrmLanguage.OrmLanguageDomainModel), "Company.OrmLanguage.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.OrmLanguage.OrmLanguageDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("10f6f6a8-e10f-47b5-b83e-153c8cfb0322")]
	public partial class EntityElement : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// EntityElement domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x10f6f6a8, 0xe10f, 0x47b5, 0xb8, 0x3e, 0x15, 0x3c, 0x8c, 0xfb, 0x03, 0x22);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EntityElement(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EntityElement(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x3d2a9e27, 0x1fbf, 0x4b35, 0x82, 0xf5, 0xaa, 0xab, 0x39, 0x79, 0xcc, 0xec);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = "New Entity";
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Company.OrmLanguage.EntityElement.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Company.OrmLanguage.EntityElement/Name.DisplayName", typeof(global::Company.OrmLanguage.OrmLanguageDomainModel), "Company.OrmLanguage.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.OrmLanguage.EntityElement/Name.Description", typeof(global::Company.OrmLanguage.OrmLanguageDomainModel), "Company.OrmLanguage.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("New Entity")]
		[DslModeling::DomainObjectId("3d2a9e27-1fbf-4b35-82f5-aaab3979ccec")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EntityElement.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<EntityElement, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EntityElement.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EntityElement.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(EntityElement element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntityElement element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region SampleOrmModel opposite domain role accessor
		/// <summary>
		/// Gets or sets SampleOrmModel.
		/// </summary>
		public virtual SampleOrmModel SampleOrmModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.OrmLanguage.SampleOrmModelHasElements.ElementDomainRoleId) as SampleOrmModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.OrmLanguage.SampleOrmModelHasElements.ElementDomainRoleId, value);
			}
		}
		#endregion
		#region EntityElements opposite domain role accessor
		
		/// <summary>
		/// Gets a list of EntityElements.
		/// Description for Company.OrmLanguage.EntityHasRelationShips.SourceEntityElement
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<EntityElement> EntityElements
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<EntityElement>, EntityElement>(global::Company.OrmLanguage.EntityHasRelationShips.SourceEntityElementDomainRoleId);
			}
		}
		#endregion
		#region SourceEntityElements opposite domain role accessor
		
		/// <summary>
		/// Gets a list of SourceEntityElements.
		/// Description for Company.OrmLanguage.EntityHasRelationShips.TargetEntityElement
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<EntityElement> SourceEntityElements
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<EntityElement>, EntityElement>(global::Company.OrmLanguage.EntityHasRelationShips.TargetEntityElementDomainRoleId);
			}
		}
		#endregion
		#region Properties opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Properties.
		/// Description for Company.OrmLanguage.EntityHasProperties.EntityElement
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Property> Properties
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Property>, Property>(global::Company.OrmLanguage.EntityHasProperties.EntityElementDomainRoleId);
			}
		}
		#endregion
		#region References opposite domain role accessor
		
		/// <summary>
		/// Gets a list of References.
		/// Description for Company.OrmLanguage.EntityHasReferences.EntityElement
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Reference> References
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Reference>, Reference>(global::Company.OrmLanguage.EntityHasReferences.EntityElementDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.OrmLanguage.Property.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.OrmLanguage.Reference.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Company.OrmLanguage.Property sourceProperty1 = sourceElement as global::Company.OrmLanguage.Property;
			if (sourceProperty1 != null)
			{
				// Create link for path EntityHasProperties.Properties
				this.Properties.Add(sourceProperty1);

				return;
			}
				
			global::Company.OrmLanguage.Reference sourceReference2 = sourceElement as global::Company.OrmLanguage.Reference;
			if (sourceReference2 != null)
			{
				// Create link for path EntityHasReferences.References
				this.References.Add(sourceReference2);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Company.OrmLanguage.Property sourceProperty1 = sourceElement as global::Company.OrmLanguage.Property;
			if (sourceProperty1 != null)
			{
				// Delete link for path EntityHasProperties.Properties
				
				foreach (DslModeling::ElementLink link in global::Company.OrmLanguage.EntityHasProperties.GetLinks((global::Company.OrmLanguage.EntityElement)this, sourceProperty1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.OrmLanguage.EntityHasProperties.EntityElementDomainRoleId, global::Company.OrmLanguage.EntityHasProperties.PropertyDomainRoleId);
				}

				return;
			}
				
			global::Company.OrmLanguage.Reference sourceReference2 = sourceElement as global::Company.OrmLanguage.Reference;
			if (sourceReference2 != null)
			{
				// Delete link for path EntityHasReferences.References
				
				foreach (DslModeling::ElementLink link in global::Company.OrmLanguage.EntityHasReferences.GetLinks((global::Company.OrmLanguage.EntityElement)this, sourceReference2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.OrmLanguage.EntityHasReferences.EntityElementDomainRoleId, global::Company.OrmLanguage.EntityHasReferences.ReferenceDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Company.OrmLanguage
{
	/// <summary>
	/// DomainClass Entry
	/// Description for Company.OrmLanguage.Entry
	/// </summary>
	[DslDesign::DisplayNameResource("Company.OrmLanguage.Entry.DisplayName", typeof(global::Company.OrmLanguage.OrmLanguageDomainModel), "Company.OrmLanguage.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.OrmLanguage.Entry.Description", typeof(global::Company.OrmLanguage.OrmLanguageDomainModel), "Company.OrmLanguage.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.OrmLanguage.OrmLanguageDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("434fcd74-129b-4049-ba26-b5e60d519a1a")]
	public abstract partial class Entry : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Entry domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x434fcd74, 0x129b, 0x4049, 0xba, 0x26, 0xb5, 0xe6, 0x0d, 0x51, 0x9a, 0x1a);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected Entry(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x360c5f50, 0xebef, 0x479d, 0x9b, 0x9b, 0xe9, 0x27, 0xa9, 0x59, 0xf8, 0x92);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Company.OrmLanguage.Entry.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Company.OrmLanguage.Entry/Name.DisplayName", typeof(global::Company.OrmLanguage.OrmLanguageDomainModel), "Company.OrmLanguage.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.OrmLanguage.Entry/Name.Description", typeof(global::Company.OrmLanguage.OrmLanguageDomainModel), "Company.OrmLanguage.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("360c5f50-ebef-479d-9b9b-e927a959f892")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Entry.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<Entry, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Entry.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Entry.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Entry element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Entry element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Guid domain property code
		
		/// <summary>
		/// Guid domain property Id.
		/// </summary>
		public static readonly global::System.Guid GuidDomainPropertyId = new global::System.Guid(0xa0755a71, 0xef60, 0x4c60, 0xbf, 0x65, 0x5b, 0xf0, 0xd8, 0x5e, 0xf7, 0xec);
		
		/// <summary>
		/// Gets or sets the value of Guid domain property.
		/// Description for Company.OrmLanguage.Entry.Guid
		/// </summary>
		[DslDesign::DisplayNameResource("Company.OrmLanguage.Entry/Guid.DisplayName", typeof(global::Company.OrmLanguage.OrmLanguageDomainModel), "Company.OrmLanguage.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.OrmLanguage.Entry/Guid.Description", typeof(global::Company.OrmLanguage.OrmLanguageDomainModel), "Company.OrmLanguage.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.Calculated)]
		[DslModeling::DomainObjectId("a0755a71-ef60-4c60-bf65-5bf0d85ef7ec")]
		public global::System.Guid Guid
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GuidPropertyHandler.Instance.GetValue(this);
			}
		}
		/// <summary>
		/// Value handler for the Entry.Guid domain property.
		/// </summary>
		internal sealed partial class GuidPropertyHandler : DslModeling::CalculatedPropertyValueHandler<Entry, global::System.Guid>
		{
			private GuidPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Entry.Guid domain property value handler.
			/// </summary>
			public static readonly GuidPropertyHandler Instance = new GuidPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Entry.Guid domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return GuidDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Guid GetValue(Entry element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for Guid because its Kind is
				// set to Calculated. Please provide the GetGuidValue()
				// method on the domain class.
				return element.GetGuidValue();
			}
		
		}
		
		#endregion
	}
}
namespace Company.OrmLanguage
{
	/// <summary>
	/// DomainClass Property
	/// Description for Company.OrmLanguage.Property
	/// </summary>
	[DslDesign::DisplayNameResource("Company.OrmLanguage.Property.DisplayName", typeof(global::Company.OrmLanguage.OrmLanguageDomainModel), "Company.OrmLanguage.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.OrmLanguage.Property.Description", typeof(global::Company.OrmLanguage.OrmLanguageDomainModel), "Company.OrmLanguage.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.OrmLanguage.OrmLanguageDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("b9437070-9bf3-4fa0-a37d-0e63d94b2e8e")]
	public sealed partial class Property : Entry
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Property domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xb9437070, 0x9bf3, 0x4fa0, 0xa3, 0x7d, 0x0e, 0x63, 0xd9, 0x4b, 0x2e, 0x8e);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Property(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Property(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region EntityElement opposite domain role accessor
		/// <summary>
		/// Gets or sets EntityElement.
		/// Description for Company.OrmLanguage.EntityHasProperties.Property
		/// </summary>
		public EntityElement EntityElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.OrmLanguage.EntityHasProperties.PropertyDomainRoleId) as EntityElement;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.OrmLanguage.EntityHasProperties.PropertyDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Company.OrmLanguage
{
	/// <summary>
	/// DomainClass Reference
	/// Description for Company.OrmLanguage.Reference
	/// </summary>
	[DslDesign::DisplayNameResource("Company.OrmLanguage.Reference.DisplayName", typeof(global::Company.OrmLanguage.OrmLanguageDomainModel), "Company.OrmLanguage.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.OrmLanguage.Reference.Description", typeof(global::Company.OrmLanguage.OrmLanguageDomainModel), "Company.OrmLanguage.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.OrmLanguage.OrmLanguageDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("35492d24-c52d-488e-a334-d32c0850ea5f")]
	public sealed partial class Reference : Entry
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Reference domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x35492d24, 0xc52d, 0x488e, 0xa3, 0x34, 0xd3, 0x2c, 0x08, 0x50, 0xea, 0x5f);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Reference(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Reference(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region EntityElement opposite domain role accessor
		/// <summary>
		/// Gets or sets EntityElement.
		/// Description for Company.OrmLanguage.EntityHasReferences.Reference
		/// </summary>
		public EntityElement EntityElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.OrmLanguage.EntityHasReferences.ReferenceDomainRoleId) as EntityElement;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.OrmLanguage.EntityHasReferences.ReferenceDomainRoleId, value);
			}
		}
		#endregion
	}
}
