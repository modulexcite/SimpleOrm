<#@ template inherits="Microsoft.VisualStudio.TextTemplating.VSHost.ModelingTextTransformation" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ output extension=".cs" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
<#@ include file="Dsl\DomainClassSerializer.tt" #>
<#@ include file="Dsl\DomainModelSerializer.tt" #>
<#@ include file="Dsl\SerializationUtilities.tt" #>
<#@ include file="Dsl\MonikerSerializer.tt" #>
<#@ include file="Dsl\DomainXmlSerializationBehavior.tt" #>
<#@ include file="Dsl\DomainXmlMonikerResolver.tt" #>
<#@ include file="Dsl\SerializationMessages.tt" #>
<#@ include file="Dsl\Utilities.tt" #>

using DslModeling = global::Microsoft.VisualStudio.Modeling;
<#
	if (CodeGenerationUtilities.DefinesDiagramElements(this.DslLibrary))
	{
#>
using DslDiagrams = global::Microsoft.VisualStudio.Modeling.Diagrams;
<#
	}
	
	// Add an empty line after using statements
#>

<#
	if (this.DslLibrary != null)
		GenerateDomainModelSerializer(this.DslLibrary);
#>

<#+
private void GenerateDomainModelSerializer(Microsoft.VisualStudio.Modeling.DslDefinition.DslLibrary dm)
{
	XmlSerializationBehavior behavior = dm.XmlSerializationBehavior;
	IList<DomainClass> serializedClasses = CodeGenerationUtilities.GetSerializedDomainClasses(dm);
	
	// Stores the mapping from DomainClass to generated serializers. The mapping will be written into the generated XmlSerializationBehavior 
	// class at the end.
	List<KeyValuePair<DomainClass, string>> generatedSerializers = new List<KeyValuePair<DomainClass, string>> ();
	// A dictionary to store all serializer names that have been used, so that we always generate unique serializer names.
	UniqueSerializerNameGenerator uniqueSerializerNameGenerator = new UniqueSerializerNameGenerator (serializedClasses);
	
	foreach(DomainClass serializedClass in serializedClasses)
	{
		string serializerTypeName = GenerateDomainClassSerializer(behavior, serializedClass, uniqueSerializerNameGenerator);
		if (!string.IsNullOrEmpty (serializerTypeName))
		{
			generatedSerializers.Add (new KeyValuePair<DomainClass, string> (serializedClass, serializerTypeName));
		}
	}
	
	GenerateXmlSerializationBehavior (dm, behavior, generatedSerializers);
	
	GenerateXmlMonikerResolver (dm, behavior);
	
	GenerateSerializationMessages (dm);

	GenerateSerializerInterfaceImplementation (dm);
}
#>