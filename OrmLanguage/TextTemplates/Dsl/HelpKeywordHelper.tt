<#@ template inherits="Microsoft.VisualStudio.TextTemplating.VSHost.ModelingTextTransformation" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Collections.Generic" #>
<#
	string dslName = this.DslLibrary.Name;
	
	// collect all the help keywords from the model
	Dictionary<string, string> helpKeywords = new Dictionary<string, string>();
	
	DomainClass rootClass = (this.IsDsl && this.Dsl.Editor != null) ? this.Dsl.Editor.RootClass : null;
	
	foreach(DomainClass c in this.DslLibrary.Classes)
	{
		if(!string.IsNullOrEmpty(c.HelpKeyword))
		{
			helpKeywords.Add(c.GetFullName(false), c.HelpKeyword);
		}
		
		foreach(DomainProperty p in c.Properties)
		{
			if(!string.IsNullOrEmpty(p.HelpKeyword))
			{
				helpKeywords.Add(c.GetFullName(false) + "/" + p.Name, p.HelpKeyword);
			}
		}
	}
	
	foreach(DomainRelationship r in this.DslLibrary.Relationships)
	{
		string fullName = r.GetFullName(false);
		if(!string.IsNullOrEmpty(r.HelpKeyword))
		{
			helpKeywords.Add(fullName, r.HelpKeyword);
		}
		
		DomainRole role = r.Source;
		if(!string.IsNullOrEmpty(role.HelpKeyword))
		{
			helpKeywords.Add(fullName + "/" + role.Name, role.HelpKeyword);
		}
		
		role = r.Target;
		if(!string.IsNullOrEmpty(role.HelpKeyword))
		{
			helpKeywords.Add(fullName + "/" + role.Name, role.HelpKeyword);
		}
		
		foreach(DomainProperty p in r.Properties)
		{
			if(!string.IsNullOrEmpty(p.HelpKeyword))
			{
				helpKeywords.Add(fullName + "/" + p.Name, p.HelpKeyword);
			}
		}
	}
	
	foreach(BaseShape shape in this.DslLibrary.Shapes)
	{
		if(!string.IsNullOrEmpty(shape.HelpKeyword))
		{
			helpKeywords.Add(shape.GetFullName(false), shape.HelpKeyword);
		}
		
		foreach(DomainProperty p in shape.Properties)
		{
			if(!string.IsNullOrEmpty(p.HelpKeyword))
			{
				helpKeywords.Add(shape.GetFullName(false) + "/" + p.Name, p.HelpKeyword);
			}
		}
	}
	
	foreach(Connector connector in this.DslLibrary.Connectors)
	{
		if(!string.IsNullOrEmpty(connector.HelpKeyword))
		{
			helpKeywords.Add(connector.GetFullName(false), connector.HelpKeyword);
		}
		
		foreach(DomainProperty p in connector.Properties)
		{
			if(!string.IsNullOrEmpty(p.HelpKeyword))
			{
				helpKeywords.Add(connector.GetFullName(false) + "/" + p.Name, p.HelpKeyword);
			}
		}
	}
	
	if(this.IsDsl)
	{
		Diagram diagram = this.Dsl.Diagram;
		if(diagram != null && !string.IsNullOrEmpty(diagram.HelpKeyword))
		{
			helpKeywords.Add(diagram.GetFullName(false), diagram.HelpKeyword);
			
			foreach(DomainProperty p in diagram.Properties)
			{
				if(!string.IsNullOrEmpty(p.HelpKeyword))
				{
					helpKeywords.Add(diagram.GetFullName(false) + "/" + p.Name, p.HelpKeyword);
				}
			}
		}
	}
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
using DslDiagrams = global::Microsoft.VisualStudio.Modeling.Diagrams;

namespace <#= this.DslLibrary.Namespace #>
{
	/// <summary>
	/// Helper class used to map shapes and model elements to help keywords.
	/// </summary>
	/// <remarks>
	/// Double-derived class to allow easier code customization.
	/// </remarks>
	<#= rootClass != null ? CodeGenerationUtilities.GetTypeAccessModifier(rootClass.AccessModifier) : "internal" #> partial class <#= dslName #>HelpKeywordHelper : <#= dslName #>HelpKeywordHelperBase 
	{
<#
	if(helpKeywords.Count > 0)
	{
#>
		private static <#= dslName #>HelpKeywordHelper helpKeywordHelper;
<#
	}
#>
		
		/// <summary>
		/// Constructs a new <#= dslName #>HelpKeywordHelper.
		/// </summary>
		protected <#= dslName #>HelpKeywordHelper()
			: base() { }
			
		/// <summary>
		/// Single instance of the <#= dslName #>HelpKeywordHelper.
		/// </summary>
		public static <#= dslName #>HelpKeywordHelper Instance
		{
			get
			{
<#
	if(helpKeywords.Count > 0)
	{
#>
				if(helpKeywordHelper == null)
				{
					helpKeywordHelper = new <#= dslName #>HelpKeywordHelper();
				}
				
				return helpKeywordHelper;
<#
	}
	else
	{
#>
				return null; // This DSL does not define any help keywords.
<#
	}
#>
			}
		}
	}
	
	/// <summary>
	/// Helper class used to map shapes and model elements to F1 help keywords.
	/// </summary>
	<#= rootClass != null ? CodeGenerationUtilities.GetTypeAccessModifier(rootClass.AccessModifier) : "internal" #> abstract class <#= dslName #>HelpKeywordHelperBase
	{
		private global::System.Collections.Generic.Dictionary<string, string> helpKeywords;
		
		/// <summary>
		/// Constructs a new <#= dslName #>HelpKeywordHelperBase.
		/// </summary>
		protected <#= dslName #>HelpKeywordHelperBase()
			: base() { }
			
		/// <summary>
		/// Called to initialize the HelpKeywords dictionary.  Derived classes may override this to add custom keywords to the collection.
		/// </summary>
		protected virtual void Initialize()
		{
			this.helpKeywords = new global::System.Collections.Generic.Dictionary<string, string>(<#= helpKeywords.Count #>);
<#
		foreach(string key in helpKeywords.Keys)
		{
#>
			this.helpKeywords.Add(@"<#= key #>", @"<#= helpKeywords[key] #>");
<#
		}
#>
		}
		
		/// <summary>
		/// Collection of key/value pairs describing help keywords for this DSL.
		/// Keys are strings such as domain class names that describe elements of the DSL.
		/// Values are corresponding help keywords.
		/// </summary>
		protected global::System.Collections.Generic.IDictionary<string, string> HelpKeywords
		{
			get
			{
				if (this.helpKeywords == null)
				{
					this.helpKeywords = new global::System.Collections.Generic.Dictionary<string, string>(10);
				}

				return this.helpKeywords;
			}
		}
		
		/// <summary>
		/// Gets the help keyword associated with the given shape or model element instance.
		/// </summary>
		/// <returns>Help keyword, or empty string if there is no associated help keyword.</returns>
		public virtual string GetHelpKeyword(DslModeling::ModelElement modelElement)
		{
			if(modelElement == null) throw new global::System.ArgumentNullException("modelElement");
			
			if(this.helpKeywords == null)
			{
				Initialize();
			}
			
			string helpKeyword;
			if(this.helpKeywords.TryGetValue(modelElement.GetType().FullName, out helpKeyword))
			{
				return helpKeyword;
			}
			
			return string.Empty;
		}
		
		/// <summary>
		/// Gets the help keyword associated with the given domain role.
		/// </summary>
		/// <returns>Help keyword, or empty string if there is no associated help keyword.</returns>
		public virtual string GetDomainRoleHelpKeyword(DslModeling::DomainRoleInfo domainRole)
		{
			if(domainRole == null) throw new global::System.ArgumentNullException("domainRole");
			
			if(this.helpKeywords == null)
			{
				Initialize();
			}
			
			string helpKeyword;
			if(this.helpKeywords.TryGetValue(domainRole.DomainRelationship.ImplementationClass.FullName + "/" + domainRole.Name, out helpKeyword))
			{
				return helpKeyword;
			}
			
			return string.Empty;
		}
		
		/// <summary>
		/// Gets the help keyword associated with the given domain property.
		/// </summary>
		/// <returns>Help keyword, or empty string if there is no associated help keyword.</returns>
		public virtual string GetDomainPropertyHelpKeyword(DslModeling::DomainPropertyInfo domainProperty)
		{
			if(domainProperty == null) throw new global::System.ArgumentNullException("domainProperty");
			
			if(this.helpKeywords == null)
			{
				Initialize();
			}
			
			string helpKeyword;
			if(this.helpKeywords.TryGetValue(domainProperty.DomainClass.ImplementationClass.FullName + "/" + domainProperty.Name, out helpKeyword))
			{
				return helpKeyword;
			}
			
			return string.Empty;
		}
	}
}
