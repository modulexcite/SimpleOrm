<#@ template inherits="Microsoft.VisualStudio.TextTemplating.VSHost.ModelingTextTransformation" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Drawing" #>
<#@ import namespace="System.Drawing.Drawing2D" #>
<#@ assembly name="System.Drawing" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ include file="Dsl\DomainClass.tt" #>
<#@ include file="Dsl\DomainProperty.tt" #>
<#@ include file="Dsl\DomainRole.tt" #>
<#@ include file="Dsl\Utilities.tt" #>
<#@ include file="Dsl\DiagramUtilities.tt" #>
<#@ include file="Dsl\PathMerge.tt" #>
<#@ include file="Dsl\Merge.tt" #>
<#@ output extension=".cs" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
<#
	if(this.DslLibrary.Connectors.Count == 0)
	{
#>
//
// This file is empty because the DSL definition does not define any Connectors.
//
<#
	}
	else
	{
#>

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
using DslDiagrams = global::Microsoft.VisualStudio.Modeling.Diagrams;

<#
		foreach(Connector connector in DslLibrary.Connectors)
		{
			string baseClass;
			if(connector.BaseClass != null)
			{
				baseClass = connector.BaseClass.GetFullName(true);
			}
			else
			{
				baseClass = "DslDiagrams::BinaryLinkShape";
			}
			
			DomainClassCodeGenerator constructorGenerator = connector.Decorators.Count > 0 ? new DomainClassCodeGenerator(this.GenerateDiagramElementConstructor) : null;
			GenerateDomainClass(connector, baseClass, new DomainClassCodeGenerator(this.GenerateConnector), constructorGenerator, null);
		}
	}
#>
<#+
private void GenerateConnector(DomainClass domainClass, object context)
{
	Connector connector = domainClass as Connector;
	if(connector==null)
	{
		return;
	}
	GenerateDiagramElementBoilerplate(connector);
#>

#region Connector styles
<#+
	// defaults here match those in StyleSetApplication.cs
	bool customColor = (connector.Color != System.Drawing.Color.Black);
	bool customTextColor = (connector.TextColor != System.Drawing.Color.Black);
	bool customDashStyle = (connector.DashStyle != DashStyle.Solid);
	bool customThickness = (connector.Thickness != 0.03125);
	bool customSourceEnd = (connector.SourceEndStyle != ConnectorEndStyle.None);
	bool customTargetEnd = (connector.TargetEndStyle != ConnectorEndStyle.None);
	
	// build list of custom font ids
	Dictionary<string, KeyValuePair<float, FontStyle>> customFonts = new Dictionary<string, KeyValuePair<float, FontStyle>>();
	foreach(Decorator decorator in connector.Decorators)
	{
		TextDecorator textDecorator = decorator as TextDecorator;
		if(textDecorator != null)
		{
			string fontId = GetFontId(textDecorator);
			if(fontId != null && !customFonts.ContainsKey(fontId))
			{
				customFonts[fontId] = new KeyValuePair<float, FontStyle>(textDecorator.FontSize, textDecorator.FontStyle);
			}
		}
	}
	
	if(customColor || 
		customTextColor ||
		customDashStyle || 
		customThickness || 
		customFonts.Count > 0)
	{
#>
/// <summary>
/// Initializes style set resources for this shape type
/// </summary>
/// <param name="classStyleSet">The style set for this shape class</param>
protected override void InitializeResources(DslDiagrams::StyleSet classStyleSet)
{
	base.InitializeResources(classStyleSet);
	
<#+
		if(customColor || customDashStyle || customThickness)
		{
#>
	// Line pen settings for this connector.
	DslDiagrams::PenSettings linePen = new DslDiagrams::PenSettings();
<#+
			if(customColor)
			{
#>
	linePen.Color = <#= MakeColorInitializer(connector.Color) #>;
	classStyleSet.OverridePen(DslDiagrams::DiagramPens.ConnectionLineDecorator, linePen);
<#+
			}
			if(customThickness)
			{
#>
	linePen.Width = <#= connector.Thickness #>f;
<#+
			}
			if(customDashStyle)
			{
#>
	linePen.DashStyle = global::System.Drawing.Drawing2D.DashStyle.<#= connector.DashStyle #>;
<#+
			}
#>
	classStyleSet.OverridePen(DslDiagrams::DiagramPens.ConnectionLine, linePen);
<#+
		}
#>

<#+
		if(customColor)
		{
#>
	DslDiagrams::BrushSettings lineBrush = new DslDiagrams::BrushSettings();
	lineBrush.Color = <#= MakeColorInitializer(connector.Color) #>;
	classStyleSet.OverrideBrush(DslDiagrams::DiagramBrushes.ConnectionLineDecorator, lineBrush);
	
<#+
		}
		
		if(customTextColor)
		{
#>
	DslDiagrams::BrushSettings textBrush = new DslDiagrams::BrushSettings();
	textBrush.Color = <#= MakeColorInitializer(connector.TextColor) #>;
	classStyleSet.OverrideBrush(DslDiagrams::DiagramBrushes.ShapeText, textBrush);

<#+
		}
		
		if(customFonts.Count > 0)
		{
#>
	// Custom font styles
	DslDiagrams::FontSettings fontSettings;
<#+
			foreach(string fontId in customFonts.Keys)
			{
				KeyValuePair<float, FontStyle> fontSettings = customFonts[fontId];
#>
	fontSettings = new DslDiagrams::FontSettings();
	fontSettings.Style = <#= CodeGenerationUtilities.GenerateFontStyle(fontSettings.Value) #>;
	fontSettings.Size = <#= fontSettings.Key #>/72.0F;
	classStyleSet.AddFont(new DslDiagrams::StyleSetResourceId(string.Empty, "<#= fontId #>"), DslDiagrams::DiagramFonts.ShapeText, fontSettings);
<#+
			}
		}
#>
}

<#+
	}
	
	if(customSourceEnd || customTargetEnd)
	{
		string sourceEnd = customSourceEnd ? "DslDiagrams::LinkDecorator.Decorator" + connector.SourceEndStyle.ToString() : "null";
		string targetEnd = customTargetEnd ? "DslDiagrams::LinkDecorator.Decorator" + connector.TargetEndStyle.ToString() : "null";
		string sourceSize = string.Format(global::System.Globalization.CultureInfo.InvariantCulture, "new DslDiagrams::SizeD({0},{1})", customSourceEnd ? connector.SourceEndWidth : 0.1, customSourceEnd ? connector.SourceEndHeight : 0.1); 
		string targetSize = string.Format(global::System.Globalization.CultureInfo.InvariantCulture, "new DslDiagrams::SizeD({0},{1})", customTargetEnd ? connector.TargetEndWidth : 0.1, customTargetEnd ? connector.TargetEndHeight : 0.1); 
#>
/// <summary>
/// Initializes resources associated with this connector instance.
/// </summary>
protected override void InitializeInstanceResources()
{
	base.InitializeInstanceResources();
	this.SetDecorators(<#= sourceEnd #>, <#= sourceSize #>, <#= targetEnd #>, <#= targetSize#>, false);
}

<#+
	}
	
	if(connector.RoutingStyle == RoutingStyle.Straight)
	{
#>
/// <summary>
/// Gets the default line routing style for this connector.
/// </summary>
<#+
		if (domainClass.AccessModifier == TypeAccessModifier.Public)
		{
#>
[global::System.CLSCompliant(false)]
<#+
		}
#>
protected override DslDiagrams::GraphObject.VGRoutingStyle DefaultRoutingStyle
{
	get
	{
		return DslDiagrams::GraphObject.VGRoutingStyle.VGRouteStraight;
	}
}
<#+
	}
#>
#endregion

<#+
	bool hasCustomStoredProperties = (connector.ExposesTextColor || connector.ExposesDashStyleAsProperty || connector.ExposesThicknessAsProperty || connector.ExposesColorAsProperty);
	if(hasCustomStoredProperties)
	{
#>
#region Custom storage for connector properties that appear in the property grid
<#+
		if(connector.ExposesTextColor)
		{
			// custom-stored domain property to represent text color should exist as part of connector definition, just generate getter/setter here
#>
/// <summary>
/// Custom storage for domain property TextColor.
/// </summary>
private global::System.Drawing.Color GetTextColorValue()
{
	DslDiagrams::BrushSettings settings = this.StyleSet.GetOverriddenBrushSettings(DslDiagrams::DiagramBrushes.ShapeText);
	if(settings != null && settings.IsOverridden(DslDiagrams::BrushSettingsFlags.Color))
	{
		return settings.Color;
	}
	return <#= MakeColorInitializer(connector.TextColor) #>;
}

/// <summary>
/// Custom storage for domain property TextColor.
/// </summary>
private void SetTextColorValue(global::System.Drawing.Color newValue)
{
	DslDiagrams::BrushSettings settings = this.StyleSet.GetOverriddenBrushSettings(DslDiagrams::DiagramBrushes.ShapeText);
	if(settings == null) settings = new DslDiagrams::BrushSettings();
	settings.Color = newValue;
	this.StyleSet.OverrideBrush(DslDiagrams::DiagramBrushes.ShapeText, settings);
	this.Invalidate();
}
<#+
		} //endif(connector.ExposesTextColor)

		if(connector.ExposesDashStyleAsProperty)
		{
			// custom-stored domain property to represent outline color should exist as part of shape definition, just generate getter/setter here
#>
/// <summary>
/// Custom storage for domain property DashStyle.
/// </summary>
private global::System.Drawing.Drawing2D.DashStyle GetDashStyleValue()
{
	DslDiagrams::PenSettings settings = this.StyleSet.GetOverriddenPenSettings(DslDiagrams::DiagramPens.ConnectionLine);
	if(settings != null && settings.IsOverridden(DslDiagrams::PenSettingsFlags.DashStyle))
	{
		return settings.DashStyle;
	}
	return global::System.Drawing.Drawing2D.DashStyle.<#= connector.DashStyle #>;
}

/// <summary>
/// Custom storage for domain property DashStyle.
/// </summary>
private void SetDashStyleValue(global::System.Drawing.Drawing2D.DashStyle newValue)
{
	DslDiagrams::PenSettings settings = this.StyleSet.GetOverriddenPenSettings(DslDiagrams::DiagramPens.ConnectionLine);
	if(settings == null) settings = new DslDiagrams::PenSettings();
	settings.DashStyle = newValue;
	this.StyleSet.OverridePen(DslDiagrams::DiagramPens.ConnectionLine, settings);
	this.Invalidate();
}

<#+
		}
		
		if(connector.ExposesThicknessAsProperty)
		{
			// custom-stored domain property to represent thickness should exist as part of shape definition, just generate getter/setter here
#>
/// <summary>
/// Custom storage for domain property Thickness.
/// </summary>
private float GetThicknessValue()
{
	DslDiagrams::PenSettings settings = this.StyleSet.GetOverriddenPenSettings(DslDiagrams::DiagramPens.ConnectionLine);
	if(settings != null && settings.IsOverridden(DslDiagrams::PenSettingsFlags.Width))
	{
		return settings.Width;
	}
	return <#= connector.Thickness #>f;
}

/// <summary>
/// Custom storage for domain property Thickness.
/// </summary>
private void SetThicknessValue(float newValue)
{
	DslDiagrams::PenSettings settings = this.StyleSet.GetOverriddenPenSettings(DslDiagrams::DiagramPens.ConnectionLine);
	if(settings == null) settings = new DslDiagrams::PenSettings();
	settings.Width = newValue;
	this.StyleSet.OverridePen(DslDiagrams::DiagramPens.ConnectionLine, settings);
	this.Invalidate();
}

<#+
		}
		
		if(connector.ExposesColorAsProperty)
		{
			// custom-stored domain property to represent color should exist as part of shape definition, just generate getter/setter here
#>
/// <summary>
/// Custom storage for domain property FillColor.
/// </summary>
private global::System.Drawing.Color GetColorValue()
{
	DslDiagrams::PenSettings settings = this.StyleSet.GetOverriddenPenSettings(DslDiagrams::DiagramPens.ConnectionLine);
	if(settings != null && settings.IsOverridden(DslDiagrams::PenSettingsFlags.Color))
	{
		return settings.Color;
	}
	return <#= MakeColorInitializer(connector.Color) #>;
}

/// <summary>
/// Custom storage for domain property FillColor.
/// </summary>
private void SetColorValue(global::System.Drawing.Color newValue)
{
	DslDiagrams::PenSettings settings = this.StyleSet.GetOverriddenPenSettings(DslDiagrams::DiagramPens.ConnectionLine);
	if(settings == null) settings = new DslDiagrams::PenSettings();
	settings.Color = newValue;
	this.StyleSet.OverridePen(DslDiagrams::DiagramPens.ConnectionLine, settings);
	settings = this.StyleSet.GetOverriddenPenSettings(DslDiagrams::DiagramPens.ConnectionLineDecorator);
	if(settings == null) settings = new DslDiagrams::PenSettings();
	settings.Color = newValue;
	this.StyleSet.OverridePen(DslDiagrams::DiagramPens.ConnectionLineDecorator, settings);
	this.Invalidate();
}
<#+
		}
#>
#endregion

<#+
	}

	if(connector.Decorators.Count > 0)
	{
#>
#region Decorators
<#+
		GenerateDecorators(connector);		
#>
#endregion

<#+
	}
}
#>

